/*
 * Samsung Exynos SoC series Pablo driver
 *
 * Copyright (c) 2019 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#include <dt-bindings/camera/exynos_is_dt.h>
#include <dt-bindings/interrupt-controller/exynos9630.h>
#include <dt-bindings/clock/exynos9630.h>

#include "../../camera/vendor_dt/a71x/is-vendor-sensor-pwr_aas_v71x_r04.h"
#include "../../camera/vendor_dt/a71x/camera_a71x_common_exynos980.dtsi"
#include "../../camera/module_imx686.dtsi"
#include "../../camera/module_imx616.dtsi"
#include "../../camera/module_hi1336.dtsi"
#include "../../camera/module_gc5035.dtsi"

/***** reference camera node *****/
/ {
	fragment@camera {
		target-path = "/";
		__overlay__ {
			/* REAR CAMERA */
			is_sensor_imx686: is_sensor_imx686@1A {
				pinctrl-names = "pin0", "pin1", "pin2", "release";
				pinctrl-0 = <&sensor_mclk1_out>;
				pinctrl-1 = <&sensor_mclk1_fn>;
				pinctrl-2 = <>;
				pinctrl-3 = <>;

				id = <0>;				/* id of is_sensor*/
				mclk_ch = <1>;
				sensor_i2c_ch = <0>;			/* SENSOR_CONTROL_I2C0 */
				position = <0>;				/* Rear:0 */

				status = "okay";

				af {
					product_name = <26>;		/* ACTUATOR_NAME_DW9817 */
					i2c_ch = <1>;			/* SENSOR_CONTROL_I2C1 */
				};

				flash {
					product_name = <14>;		/* FLADRV_NAME_S2MU106 */
				};

				power_seq {
					use = <1>;
					gpio_mclk = <&gpg0 4 0x1>;

					scenario_normal_on {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; 		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 1000>;		gpio = IMX686_RST;	};
						20 { pname = "imx686_avdd1";	pin = <PIN_REGULATOR 1 0>;				};	/* AVDD1 2.9V */
						30 { pname = "imx686_avdd2";	pin = <PIN_OUTPUT 1 0>;			gpio = IMX686_AVDD2;	};	/* AVDD2 1.8V */
						40 { pname = "imx686_iovdd";	pin = <PIN_REGULATOR 1 0>;				};	/* IOVDD 1.8V */
						50 { pname = "imx686_dvdd";	pin = <PIN_REGULATOR 1 0>;				};	/* DVDD 1.1V */
						60 { pname = "rcam_af_vdd";	pin = <PIN_REGULATOR 1 1000>;				};	/* RCAM_AF_VDD 2.8V */
						70 { pname = I2C_ON;		pin = <PIN_I2C 1 500>;					};
						80 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 1 0>;		share;		};
						90 { pname = MCLK_GPIO;		pin = <PIN_MCLK 1 500>;					};
						100 { pname = SEN_RST_HIGH;	pin = <PIN_OUTPUT 1 0>;			gpio = IMX686_RST;	};
						110 { pname = DELAY;		pin = <PIN_NONE 0 12000>;				};
					};

					scenario_normal_off {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; 		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY; 		pin = <PIN_NONE 0 1000>; 				};
						20 { pname = SEN_RST_LOW; 	pin = <PIN_OUTPUT 0 0>; 		gpio = IMX686_RST;	};
						30 { pname = MCLK_GPIO; 	pin = <PIN_MCLK 0 0>; 					};
						40 { pname = MCLK_FUNC; 	pin = <PIN_FUNCTION 0 0>; 		share;	 	};
						50 { pname = MCLK_FUNC; 	pin = <PIN_FUNCTION 2 1000>; 				};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						70 { pname = I2C_OFF; 		pin = <PIN_I2C 0 0>;					};
						80 { pname = "rcam_af_vdd"; 	pin = <PIN_REGULATOR 0 500>; 				};	/* RCAM_AF_VDD 2.8V */
						90 { pname = "imx686_avdd1"; 	pin = <PIN_REGULATOR 0 0>; 				};	/* AVDD1 2.9V */
						100 { pname = "imx686_avdd2"; 	pin = <PIN_OUTPUT 0 0>; 		gpio = IMX686_AVDD2;	};	/* AVDD2 1.8V */
						110 { pname = "imx686_iovdd"; 	pin = <PIN_REGULATOR 0 0>; 				};	/* IOVDD 1.8V */
						120 { pname = "imx686_dvdd"; 	pin = <PIN_REGULATOR 0 0>; 				};	/* DVDD 1.1V */
					};

					scenario_read_rom_on {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = "rcam_af_vdd";	pin = <PIN_REGULATOR 1 0>;				};	/* RCAM_AF_VDD 2.8V */
						20 { pname = "imx686_iovdd";	pin = <PIN_REGULATOR 1 0>;				};	/* IOVDD 1.8V */
						30 { pname = DELAY;		pin = <PIN_NONE 0 3000>;				};
					};

					scenario_read_rom_off {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; 		pin = <act value dealy voltage>; 	gpio = <gpx# # 0x1>; */
						10 { pname = "rcam_af_vdd";	pin = <PIN_REGULATOR 0 0>;				};	/* RCAM_AF_VDD 2.8V */
						20 { pname = "imx686_iovdd";	pin = <PIN_REGULATOR 0 0>;				};	/* IOVDD 1.8V */
					};

					scenario_vision_on {
						sensor_scenario = <SENSOR_SCENARIO_VISION>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 1000>;		gpio = IMX686_RST;	};
						20 { pname = "imx686_avdd1";	pin = <PIN_REGULATOR 1 0>;				};	/* AVDD1 2.9V */
						30 { pname = "imx686_avdd2";	pin = <PIN_OUTPUT 1 0>;			gpio = IMX686_AVDD2;	};	/* AVDD2 1.8V */
						40 { pname = "imx686_iovdd";	pin = <PIN_REGULATOR 1 0>;				};	/* IOVDD 1.8V */
						50 { pname = "imx686_dvdd";	pin = <PIN_REGULATOR 1 0>;				};	/* DVDD 1.1V */
						60 { pname = "rcam_af_vdd";	pin = <PIN_REGULATOR 1 1000>;				};	/* RCAM_AF_VDD 2.8V */
						70 { pname = I2C_ON;		pin = <PIN_I2C 1 500>;					};
						80 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 1 0>;			share;	};
						90 { pname = MCLK_GPIO;		pin = <PIN_MCLK 1 500>;					};
						100 { pname = SEN_RST_HIGH;	pin = <PIN_OUTPUT 1 0>;			gpio = IMX686_RST;	};
						110 { pname = DELAY;		pin = <PIN_NONE 0 12000>;				};
					};

					scenario_vision_off {
						sensor_scenario = <SENSOR_SCENARIO_VISION>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; 		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY; 		pin = <PIN_NONE 0 1000>; 				};
						20 { pname = SEN_RST_LOW; 	pin = <PIN_OUTPUT 0 0>; 		gpio = IMX686_RST;	};
						30 { pname = MCLK_GPIO; 	pin = <PIN_MCLK 0 0>; 					};
						40 { pname = MCLK_FUNC; 	pin = <PIN_FUNCTION 0 0>; 		share; 		};
						50 { pname = MCLK_FUNC; 	pin = <PIN_FUNCTION 2 1000>; 				};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						70 { pname = I2C_OFF; 		pin = <PIN_I2C 0 0>;					};
						80 { pname = "rcam_af_vdd"; 	pin = <PIN_REGULATOR 0 500>; 				};	/* RCAM_AF_VDD 2.8V */
						90 { pname = "imx686_avdd1"; 	pin = <PIN_REGULATOR 0 0>; 				};	/* AVDD1 2.9V */
						100 { pname = "imx686_avdd2"; 	pin = <PIN_OUTPUT 0 0>; 		gpio = IMX686_AVDD2;	};	/* AVDD2 1.8V */
						110 { pname = "imx686_iovdd"; 	pin = <PIN_REGULATOR 0 0>; 				};	/* IOVDD 1.8V */
						120 { pname = "imx686_dvdd"; 	pin = <PIN_REGULATOR 0 0>; 				};	/* DVDD 1.1V */
					};
				};
			}; /* is_sensor_imx686: */

			/* FRONT CAMERA */
			is_sensor_imx616: is_sensor_imx616@1A {
				pinctrl-names = "pin0", "pin1", "pin2", "release";
				pinctrl-0 = <>;
				pinctrl-1 = <&sensor_mclk0_out>;
				pinctrl-2 = <&sensor_mclk0_fn>;
				pinctrl-3 = <>;

				id = <1>;				/* id of is_sensor*/
				mclk_ch = <0>;
				sensor_i2c_ch = <3>;			/* SENSOR_CONTROL_I2C3 */
				position = <1>;				/* Front:1 */

				status = "okay";

				power_seq {
					use = <1>;
					gpio_mclk = <&gpg0 3 0x1>;

					scenario_normal_on {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 1000>;		gpio = IMX616_RST;	};
						20 { pname = "imx616_avdd";	pin = <PIN_REGULATOR 1 0>;				}; /* IMX616_AVDD 2.8V */
						30 { pname = "imx616_iovdd";	pin = <PIN_REGULATOR 1 0>;				}; /* IMX616_IOVDD 1.8V */
						40 { pname = "imx616_dvdd";	pin = <PIN_REGULATOR 1 1000>;				}; /* IMX616_DVDD 1.05V */
						50 { pname = I2C_ON;		pin = <PIN_I2C 1 500>;					};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 2 0>;				};
						70 { pname = MCLK_GPIO;		pin = <PIN_MCLK 1 500>;					};
						80 { pname = SEN_RST_HIGH; 	pin = <PIN_OUTPUT 1 0>;			gpio = IMX616_RST;	};
						90 { pname = DELAY;		pin = <PIN_NONE 0 13000>;				};
					};

					scenario_normal_off {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY;		pin = <PIN_NONE 0 5000>;				};
						20 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 0>;			gpio = IMX616_RST;	};
						30 { pname = MCLK_GPIO;		pin = <PIN_MCLK 0 0>;					};
						40 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						50 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 1 500>;				};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						70 { pname = I2C_OFF;		pin = <PIN_I2C 0 0>;					};
						80 { pname = "imx616_avdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_AVDD 2.8V */
						90 { pname = "imx616_iovdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_IOVDD 1.8V */
						100 { pname = "imx616_dvdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_DVDD 1.05V */
					};

					scenario_read_rom_on {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = "imx616_iovdd";	pin = <PIN_REGULATOR 1 0>;				}; /* IMX616_IOVDD 1.8V */
						20 { pname = DELAY;		pin = <PIN_NONE 0 3000>;				};
					};

					scenario_read_rom_off {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = "imx616_iovdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_IOVDD 1.8V */
					};

					scenario_vision_on {
						sensor_scenario = <SENSOR_SCENARIO_VISION>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 1000>;		gpio = IMX616_RST;	};
						20 { pname = "imx616_avdd";	pin = <PIN_REGULATOR 1 0>;				}; /* IMX616_AVDD 2.8V */
						30 { pname = "imx616_iovdd";	pin = <PIN_REGULATOR 1 0>;				}; /* IMX616_IOVDD 1.8V */
						40 { pname = "imx616_dvdd";	pin = <PIN_REGULATOR 1 1000>;				}; /* IMX616_DVDD 1.05V */
						50 { pname = I2C_ON;		pin = <PIN_I2C 1 500>;					};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 2 0>;				};
						70 { pname = MCLK_GPIO;		pin = <PIN_MCLK 1 500>;					};
						80 { pname = SEN_RST_HIGH; 	pin = <PIN_OUTPUT 1 0>;			gpio = IMX616_RST;	};
						90 { pname = DELAY;		pin = <PIN_NONE 0 13000>;				};
					};

					scenario_vision_off {
						sensor_scenario = <SENSOR_SCENARIO_VISION>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>; 	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY;		pin = <PIN_NONE 0 5000>;				};
						20 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 0>;			gpio = IMX616_RST;	};
						30 { pname = MCLK_GPIO;		pin = <PIN_MCLK 0 0>;					};
						40 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						50 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 1 500>;				};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						70 { pname = I2C_OFF;		pin = <PIN_I2C 0 0>;					};
						80 { pname = "imx616_avdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_AVDD 2.8V */
						90 { pname = "imx616_iovdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_IOVDD 1.8V */
						100 { pname = "imx616_dvdd";	pin = <PIN_REGULATOR 0 0>;				}; /* IMX616_DVDD 1.05V */
					};
				};
			}; /* is_sensor_imx616: is_sensor_imx616@1A { */

			/* SUB CAMERA */
			is_sensor_gc5035: is_sensor_gc5035@6E {
				pinctrl-names = "pin0", "pin1", "pin2", "release";
				pinctrl-0 = <>;
				pinctrl-1 = <&sensor_mclk2_out>;
				pinctrl-2 = <&sensor_mclk2_fn>;
				pinctrl-3 = <>;

				id = <2>;				/* id of is_sensor*/
				mclk_ch = <2>;
				sensor_i2c_ch = <6>;			/* SENSOR_CONTROL_I2C3 */
				position = <2>;				/* Rear_Bokeh(SUB): 2 */

				status = "okay";

				power_seq {
					use = <1>;
					gpio_mclk = <&gpg0 5 0x1>;

					scenario_normal_on {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 0>;			gpio = GC5035_RST;	};
						20 { pname = "gc5035_iovdd";	pin = <PIN_REGULATOR 1 500>;				}; /* CAM_VDDIO_1P8 */
						30 { pname = "gc5035_dvdd";	pin = <PIN_REGULATOR 1 500>;				};
						40 { pname = "gc5035_avdd";	pin = <PIN_REGULATOR 1 1000>;				};
						50 { pname = SEN_RST_HIGH;	pin = <PIN_OUTPUT 1 1000>;		gpio = GC5035_RST;	};
						60 { pname = I2C_ON;		pin = <PIN_I2C 1 0>;					};
						70 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 2 1000>;				}; /* dslim. remove delay */
						80 { pname = MCLK_GPIO;		pin = <PIN_MCLK 1 0>;					};
						90 { pname = DELAY;		pin = <PIN_NONE 0 2000>;				};
					};

					scenario_normal_off {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY;		pin = <PIN_NONE 0 5000>;				};
						20 { pname = MCLK_GPIO;		pin = <PIN_MCLK 0 0>;					};
						30 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						40 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 1 500>;				};
						50 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						60 { pname = I2C_OFF;		pin = <PIN_I2C 0 0>;					};
						70 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 0>;			gpio = GC5035_RST;	};
						80 { pname = DELAY;		pin = <PIN_NONE 0 2000>;				};
						90 { pname = "gc5035_avdd";	pin = <PIN_REGULATOR 0 500>;				};
						100 { pname = "gc5035_dvdd";	pin = <PIN_REGULATOR 0 500>;				};
						110 { pname = "gc5035_iovdd";	pin = <PIN_REGULATOR 0 0>;				}; /* CAM_VDDIO_1P8 */
					};
				}; /* power_seq */
			}; /* is_sensor_gc5035 */

			/* ULTRAWIDE CAMERA */
			is_sensor_hi1336: is_sensor_hi1336@40 {
				pinctrl-names = "pin0", "pin1", "pin2", "release";
				pinctrl-0 = <>;
				pinctrl-1 = <&sensor_mclk3_out>;
				pinctrl-2 = <&sensor_mclk3_fn>;
				pinctrl-3 = <>;

				id = <3>;				/* id of is_sensor*/
				mclk_ch = <3>;
				sensor_i2c_ch = <3>;			/* SENSOR_CONTROL_I2C3 */
				position = <4>;				/* Rear_UW(Rear3): 4 */

				status = "okay";

				power_seq {
					use = <1>;
					gpio_mclk = <&gpg1 0 0x1>;

					scenario_normal_on {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";		pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 1000>; 		gpio = HI1336_RST;	};
						20 { pname = "hi1336_avdd";	pin = <PIN_REGULATOR 1 0>; 				}; /* RCAM3_AVDD_2P8 */
						30 { pname = "hi1336_iovdd";	pin = <PIN_REGULATOR 1 0>;				}; /* CAM_VDDIO_1P8 */
						40 { pname = "hi1336_dvdd";	pin = <PIN_REGULATOR 1 0>;				}; /* RCAM3_DVDD_1P1 */
						50 { pname = I2C_ON;		pin = <PIN_I2C 1 500>;					};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 2 0>;				};
						70 { pname = MCLK_GPIO;		pin = <PIN_MCLK 1 500>;					};
						80 { pname = SEN_RST_HIGH;	pin = <PIN_OUTPUT 1 0>;			gpio = HI1336_RST;	};
						90 { pname = DELAY;		pin = <PIN_NONE 0 1000>;				};
					};

					scenario_normal_off {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; 		pin = <act value dealy voltage>; 	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY;		pin = <PIN_NONE 0 5000>;				};
						20 { pname = SEN_RST_LOW;	pin = <PIN_OUTPUT 0 500>;		gpio = HI1336_RST;	};
						30 { pname = MCLK_GPIO;		pin = <PIN_MCLK 0 0>;					};
						40 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						50 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 1 500>;				};
						60 { pname = MCLK_FUNC;		pin = <PIN_FUNCTION 0 0>;				};
						70 { pname = I2C_OFF;		pin = <PIN_I2C 0 500>;					};
						80 { pname = "hi1336_avdd";	pin = <PIN_REGULATOR 0 0>;				}; /* RCAM3_AVDD_2P8 */
						90 { pname = "hi1336_iovdd";	pin = <PIN_REGULATOR 0 0>;				}; /* CAM_VDDIO_1P8 */
						100 { pname = "hi1336_dvdd";	pin = <PIN_REGULATOR 0 0>;				}; /* RCAM3_DVDD_1P1 */
					};

					scenario_read_rom_on {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; pin = <act value dealy voltage>; gpio = <gpx# # 0x1>; */
						10 { pname = "hi1336_iovdd";	pin = <PIN_REGULATOR 1 0>;				}; /* CAM_VDDIO_1P8 */
						20 { pname = DELAY;		pin = <PIN_NONE 0 3000>;				};
					};

					scenario_read_rom_off {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name"; pin = <act value dealy voltage>; gpio = <gpx# # 0x1>; */
						10 { pname = "hi1336_iovdd";	pin = <PIN_REGULATOR 0 0>;				}; /* CAM_VDDIO_1P8 */
					};
				};
			}; /* is_sensor_hi1336 */

			/* MACRO CAMERA */
			is_sensor_gc5035_macro: is_sensor_gc5035_macro@20 {
				pinctrl-names = "pin0", "pin1", "pin2", "release";
				pinctrl-0 = <>;
				pinctrl-1 = <&sensor_mclk3_out>;
				pinctrl-2 = <&sensor_mclk3_fn>;
				pinctrl-3 = <>;

				id = <4>;				/* id of is_sensor*/
				mclk_ch = <3>;
				sensor_i2c_ch = <6>;			/* SENSOR_CONTROL_I2C3 */
				position = <6>;				/* Rear4: 6 */

				status = "okay";

				flash {
					product_name = <14>;		/* FLADRV_NAME_S2MU106 */
				};

				power_seq {
					use = <1>;
					gpio_mclk = <&gpg1 0 0x1>;

					scenario_normal_on {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";			pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = SEN_RST_LOW;		pin = <PIN_OUTPUT 0 0>;	 		gpio = GC5035_MACRO_RST;	};
						20 { pname = "gc5035_macro_iovdd";	pin = <PIN_REGULATOR 1 500>;				};	/* CAM_VDDIO_1P8 */
						30 { pname = "gc5035_macro_dvdd";	pin = <PIN_REGULATOR 1 500>;				};
						40 { pname = "gc5035_macro_avdd";	pin = <PIN_REGULATOR 1 1000>;				};
						50 { pname = SEN_RST_HIGH;		pin = <PIN_OUTPUT 1 1000>;		gpio = GC5035_MACRO_RST;	};
						60 { pname = I2C_ON;			pin = <PIN_I2C 1 0>;					};
						70 { pname = MCLK_FUNC;			pin = <PIN_FUNCTION 2 1000>;				};	/* dslim. remove delay */
						80 { pname = MCLK_GPIO;			pin = <PIN_MCLK 1 0>;					};
						90 { pname = DELAY;			pin = <PIN_NONE 0 2000>;				};
					};

					scenario_normal_off {
						sensor_scenario = <SENSOR_SCENARIO_NORMAL>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						/* A start node number should be over the 10 for reserved number 0~9. */
						/* pname = "name";			pin = <act value dealy voltage>;	gpio = <gpx# # 0x1>; */
						10 { pname = DELAY;			pin = <PIN_NONE 0 5000>;		 			};
						20 { pname = MCLK_GPIO;			pin = <PIN_MCLK 0 0>;						};
						30 { pname = MCLK_FUNC;			pin = <PIN_FUNCTION 0 0>;					};
						40 { pname = MCLK_FUNC;			pin = <PIN_FUNCTION 1 500>;					};
						50 { pname = MCLK_FUNC;			pin = <PIN_FUNCTION 0 0>;					};
						60 { pname = I2C_OFF;			pin = <PIN_I2C 0 0>;						};
						70 { pname = SEN_RST_LOW;		pin = <PIN_OUTPUT 0 0>;			gpio = GC5035_MACRO_RST;	};
						80 { pname = DELAY;			pin = <PIN_NONE 0 2000>;					};
						90 { pname = "gc5035_macro_avdd";	pin = <PIN_REGULATOR 0 500>;					};
						100 { pname = "gc5035_macro_dvdd";	pin = <PIN_REGULATOR 0 500>;					};
						110 { pname = "gc5035_macro_iovdd";	pin = <PIN_REGULATOR 0 0>;					};
					};

					scenario_read_rom_on {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_ON>;

						10 { pname = "gc5035_macro_iovdd";	pin = <PIN_REGULATOR 1 0>;			};/* CAM_VDDIO_1P8 */
						20 { pname = DELAY;			pin = <PIN_NONE 0 3000>;			};
					};

					scenario_read_rom_off {
						sensor_scenario = <SENSOR_SCENARIO_READ_ROM>;
						gpio_scenario = <GPIO_SCENARIO_OFF>;

						10 { pname = "gc5035_macro_iovdd";	pin = <PIN_REGULATOR 0 0>;			};/* CAM_VDDIO_1P8 */
					};
				}; /* power_seq */
			}; /* is_sensor_gc5035_macro */

			fimc_is_flash_s2mu106: fimc-is-flash-s2mu106@17 {
				compatible = "samsung,sensor-flash-s2mu106";
				id = <0 4>;
				status = "okay";

				flash-gpio = <&gpp3 0 0>;
				torch-gpio = <&gpp3 1 0>;
			};
		}; /* end of __overlay__ */
	}; /* end of fragment */
}; /* end of root */


/***** reference module node *****/

/***** reference symbol node *****/

&exynos_is {
	secure_mem_info = <0xE1900000 0x1EE0000>;
	vender {
		rear_sensor_id = <123>;      /* SENSOR_NAME_IMX686 */
		front_sensor_id = <121>;    /* SENSOR_NAME_IMX616 */
		rear2_sensor_id = <210>;    /* SENSOR_NAME_GC5035 */
		rear3_sensor_id = <211>;    /* SENSOR_NAME_HI1336 */
		rear4_sensor_id = <210>;    /* SENSOR_NAME_GC5035 */
		need_i2c_config;
		//use_module_check;
		//skip_cal_loading;
		//check_sensor_vendor;

		/* for Factory Test */
		max_supported_camera = <6>;
		supported_cameraId = <0 1 23 50 52 54>;
		/* REAR, FRONT, DUAL_REAR_PORTRAIT_WIDE(Bokeh), REAR_2(UW), REAR_3(SUB), REAR_4(MACRO) */

		max_camera_num = <5>;
		camera_info0 {                 /* 0 : rear - IMX686 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <2>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <0>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <0>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
		camera_info1 {                 /* 1 : front1 - IMX616 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <2>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <0>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <1>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
		camera_info2 {                 /* 2 : rear2 - GC5035 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <2>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <1>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <2>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
		camera_info3 {                 /* 3 : rear3 - HI1336 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <2>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <0>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <4>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
		camera_info4 {                 /* 4 : rear4 - GC5035 */
			isp = <0>;             /* 0 : INT , 1 : EXT , 2 : SOC */
			cal_memory = <2>;      /* 0 : N , 1 : FROM , 2 : EEPROM , 3 : OTP  */
			read_version = <0>;    /* 0 : SYSFS , 1 : CAMON */
			core_voltage = <0>;    /* 0 : N , 1 : Y  */
			upgrade = <0>;         /* 0 : N , 1 : SYSFS , 2 : CAMON */
			fw_write = <0>;        /* 0 : N , 1 : OS, 2 : SD, 3 : ALL */
			fw_dump = <0>;         /* 0 : N , 1 : Y */
			companion = <0>;       /* 0 : N , 1 : Y  */
			ois = <0>;             /* 0 : N , 1 : Y  */
			valid = <1>;           /* 0 : INVALID, 1 : VALID */
			dual_open = <0>;       /* 0 : SINGLE_OPEN , 1 : DUAL_OPEN */
			position = <6>;        /* 0 : Rear, 1:Front, 2:Rear2, 3:Front2, 4:Rear3, 5:Front3, 6:Rear4*/
		};
	};

	lic_offsets {
		/* 3AA = <setA lic offset0, setA lic offset1, set A trigger context */
		/*		setB lic offset0, setB lic offset1, set B trigger context> */
		/* 4672: 4640x4352 */
		/* 5824: 5804x4352 */
		3AA = <4672 10496 1 4064 13344 2>;
	};
};

&pinctrl_1 {
	/* N/A */
	hsi2c_14_bus: hsi2c_14-bus {
		samsung,pins = "gpm4-0", "gpm5-0";
		samsung,pin-function = <2>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_14_bus_in: hsi2c_14-bus-in {
		samsung,pins = "gpm4-0", "gpm5-0";
		samsung,pin-function = <0>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	/* REAR CAM1 */
	hsi2c_12_bus: hsi2c_12-bus {
		samsung,pins = "gpm0-0", "gpm1-0";
		samsung,pin-function = <2>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_12_bus_in: hsi2c_12-bus-in {
		samsung,pins = "gpm0-0", "gpm1-0";
		samsung,pin-function = <0>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	/* REAR CAM1 ACTUATOR, REAR CAM1 EEP, FRONT EEP, REAR CAM3 EEP, REAR CAM4 EEP */
	hsi2c_13_bus: hsi2c_13-bus {
		samsung,pins = "gpm2-0", "gpm3-0";
		samsung,pin-function = <3>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_13_bus_in: hsi2c_13-bus-in {
		samsung,pins = "gpm2-0", "gpm3-0";
		samsung,pin-function = <0>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	/* FRONT, REAR CAM3(UW) */
	hsi2c_15_bus: hsi2c_15-bus {
		samsung,pins = "gpm6-0", "gpm7-0";
		samsung,pin-function = <3>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_15_bus_in: hsi2c_15-bus-in {
		samsung,pins = "gpm6-0", "gpm7-0";
		samsung,pin-function = <0>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	/* REAR CAM2(SUB-BOKEH), REAR CAM4(MACRO) */
	hsi2c_18_bus: hsi2c_18-bus {
		samsung,pins = "gpm12-0", "gpm13-0";
		samsung,pin-function = <2>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};

	hsi2c_18_bus_in: hsi2c_18-bus-in {
		samsung,pins = "gpm12-0", "gpm13-0";
		samsung,pin-function = <0>;
		samsung,pin-pud = <0>;
		samsung,pin-drv = <0>;
	};
};

&pinctrl_5 {
	flash_off_state: flash_off_state {
		samsung,pins = "gpp3-1";
		samsung,pin-con-pdn = <3>;
		samsung,pin-pud-pdn = <0>;	
	};
};

/* USI_CMGP00 - hsi2c@11500000 : SENSOR_CONTROL_I2C0*/
&hsi2c_12 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpm0 0 0 &gpm1 0 0>;
	status = "okay";
	clock-frequency = <1000000>;
	samsung,reset-before-trans;
	samsung,fast-plus-mode;		/* 1Mhz */

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&hsi2c_12_bus_in>;
	pinctrl-1 = <&hsi2c_12_bus>;
	pinctrl-2 = <&hsi2c_12_bus_in>;

	is-imx686@1A {
		compatible = "samsung,exynos-is-cis-imx686";
		reg = <0x1A>;			/* 1 bit right shift */
		id = <0>;					/* matching is_sensor id */
		sensor_f_number = <180>;	/* f number 1.8 */
		setfile = "setB";			/* first Setfile of MCD is 'setB' */
	};
};

/* USI_CMGP00_I2C - hsi2c@11510000 : SENSOR_CONTROL_I2C1 */
&hsi2c_13 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpm2 0 0 &gpm3 0 0>;
	status = "okay";
	clock-frequency = <400000>;
	samsung,reset-before-trans;

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&hsi2c_13_bus_in>;
	pinctrl-1 = <&hsi2c_13_bus>;
	pinctrl-2 = <&hsi2c_13_bus_in>;

	is-actuator@18 {
		compatible = "samsung,exynos-is-actuator-dw9817";
		reg = <0x0C>;		/* 7bit-addr */
		id = <0>;				/* matching sensor id */
		place = <0>;
	};

	rear_eeprom@A0 {
		compatible = "samsung,rear-eeprom-i2c";
		reg = <0x50>;			/* 7bit-addr */

		use_common_rom_position = <2>;
	};

	rear3_eeprom@A8 {
		compatible = "samsung,rear3-eeprom-i2c";
		reg = <0x54>;			/* 7bit-addr */
	};

	rear4_eeprom@A4 {
		compatible = "samsung,rear4-eeprom-i2c";
		reg = <0x52>;			/* 7bit-addr */
	};

	front_eeprom@A2 {
		compatible = "samsung,front-eeprom-i2c";
		reg = <0x51>;			/* 7bit-addr */
	};
};

/* USI_CMGP01_I2C - hsi2c@11530000 : SENSOR_CONTROL_I2C3*/
&hsi2c_15 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpm6 0 0 &gpm7 0 0>;
	status = "okay";
	clock-frequency = <1000000>;
	samsung,reset-before-trans;
	samsung,fast-plus-mode;	/* 1Mhz */

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&hsi2c_15_bus_in>;
	pinctrl-1 = <&hsi2c_15_bus>;
	pinctrl-2 = <&hsi2c_15_bus_in>;

	is-imx616@1A {
		compatible = "samsung,exynos-is-cis-imx616";
		reg = <0x1A>;			/* 1 bit right shift */
		id = <1>;			/* matching is_sensor id */
		sensor_f_number = <220>;	/* f number 2.0 */
		setfile = "setB";
		use_initial_ae;			/* for initial AE of face unlock */
		/* use_3hdr; */			/* enable 3hdr with using setB */
	};

	is-hi1336@40 {
		compatible = "samsung,exynos-is-cis-hi1336";
		reg = <0x21>;                   /* 1 bit right shift */
		id = <3>;                           /* matching fimc_is_sensor id */
		sensor_f_number = <220>;        /* f number 2.0 */
		setfile = "setB";
	};
};

/* USI_CMGP03 - hsi2c@11560000 : SENSOR_CONTROL_I2C6*/
&hsi2c_18 {
	#address-cells = <1>;
	#size-cells = <0>;
	gpios = <&gpm12 0 0 &gpm13 0 0>;
	status = "okay";
	clock-frequency = <400000>;
	samsung,reset-before-trans;

	pinctrl-names = "default","on_i2c","off_i2c";
	pinctrl-0 = <&hsi2c_18_bus_in>;
	pinctrl-1 = <&hsi2c_18_bus>;
	pinctrl-2 = <&hsi2c_18_bus_in>;

	is-gc5035@6E {
		compatible = "samsung,exynos-is-cis-gc5035";
		reg = <0x37>;                /* 1 bit right shift */
		id = <2>;                    /* matching is_sensor id */
		sensor_f_number = <220>;     /* f number 2.2 */
		setfile = "setB";
		use_initial_ae;              /* for initial AE of bokeh */
	};

	is-gc5035-macro@7E {
		compatible = "samsung,exynos-is-cis-gc5035-macro";
		reg = <0x3F>;                /* 1 bit right shift */
		id = <4>;                    /* matching is_sensor id */
		sensor_f_number = <240>;     /* f number 2.2 */
		setfile = "setB";
		use_initial_ae;              /* for initial AE of bokeh */
	};
};

&is_sensor0 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;	/* Normal, Vision, OIS etc */
	id = <0>;
	csi_ch = <1>;
	dma_ch = <1 1 1 1 1 1 1 1>;
	vc_ch = <0 1 2 3 0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	is_bns = <0>;
	use_cphy = <1>;

	use_ssvc2_internal;
	use_ssvc3_internal;

	status = "okay";

	reg = <0x0 0x15040000 0x1000>, /* MIPI-CSI1 */
		<0x0 0x150D0000 0x10000>; /* PHY: M0S4S4S4S4S2 */
	interrupts = <0 INTREQ__CSIS1 IRQ_TYPE_LEVEL_HIGH>, /*MIPI-CSI1 */
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA1 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
		"mode0_VC0", "mode0_VC1","mode0_VC2","mode0_VC3",
		"mode1_VC0", "mode1_VC1","mode1_VC2","mode1_VC3";
	phys = <&mipi_phy_csis1_m0s4s4s4s4s2 0>;
	/* without PAF HW */
	sensor0_ch_mode0: sensor0-ch-mode0 {
		reg = <0x150C2000 0x100>, /* DMA1 VC0 */
			<0x150C2400 0x100>, /* DMA1 Common */
			<0x150C2100 0x100>, /* DMA1 VC1 */
			<0x150C2400 0x100>, /* DMA1 Common */
			<0x150C2200 0x100>, /* DMA1 VC2 */
			<0x150C2400 0x100>, /* DMA1 Common */
			<0x150C2300 0x100>, /* DMA1 VC3 */
			<0x150C2400 0x100>; /* DMA1 Common */
		mux_reg = <0x15020418 0x4>; /* DMA1 input mux */
	};

	/* with PAF HW */
	sensor0_ch_mode1: sensor0-ch-mode1 {
		reg = <0x150C2000 0x100>, /* DMA1 VC0 */
			<0x150C2400 0x100>, /* DMA1 Common */
			<0x150C2100 0x100>, /* DMA1 VC1 */
			<0x150C2400 0x100>, /* DMA1 Common */
			<0x150C2200 0x100>, /* DMA1 VC2 */
			<0x150C2400 0x100>, /* DMA1 Common */
			<0x150C2300 0x100>, /* DMA1 VC3 */
			<0x150C2400 0x100>; /* DMA1 Common */
		mux_reg = <0x15020418 0x4>; /* DMA1 input mux */
	};
};

&is_sensor1 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;    /* Normal, Vision, OIS etc */
	id = <1>;
	csi_ch = <0>;
	dma_ch = <0 0 0 0>;
	vc_ch = <0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	is_bns = <0>;

	use_ssvc2_internal;
	use_ssvc3_internal;

	status = "okay";
	reg = <0x0 0x15030000 0x1000>, /* MIPI-CSI0 */
		<0x0 0x150D0000 0x10000>; /* PHY: M0S4S4S4S4S2 */
	interrupts = <0 INTREQ__CSIS0 IRQ_TYPE_LEVEL_HIGH>, /* MIPI-CSI0 */
		<0 INTREQ__CSIS_DMA0 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA0 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA0 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA0 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
		"mode0_VC0", "mode0_VC1","mode0_VC2","mode0_VC3";
	phys = <&mipi_phy_csis0_m0s4s4s4s4s2 0>;
	phy-names = "csis_dphy";
	/* without PAF HW */
	sensor1_ch_mode0: sensor1-ch-mode0 {
		reg = <0x150C1000 0x100>, /* DMA0 VC0 */
			<0x150C1400 0x100>, /* DMA0 Common */
			<0x150C1100 0x100>, /* DMA0 VC1 */
			<0x150C1400 0x100>, /* DMA0 Common */
			<0x150C1200 0x100>, /* DMA0 VC2 */
			<0x150C1400 0x100>, /* DMA0 Common */
			<0x150C1300 0x100>, /* DMA0 VC3 */
			<0x150C1400 0x100>; /* DMA0 Common */
		mux_reg = <0x15020414 0x4>; /* DMA0 input mux */
	};
};

&is_sensor2 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;    /* Normal, Vision, OIS etc */
	id = <3>;
	csi_ch = <2>;
	dma_ch = <2 2 2 2>;
	vc_ch = <0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	is_bns = <0>;
	status = "okay";

	interrupts = <0 INTREQ__CSIS2 IRQ_TYPE_LEVEL_HIGH>, /* MIPI-CSI2 */
		<0 INTREQ__CSIS_DMA2 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA2 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA2 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA2 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
		"mode0_VC0", "mode0_VC1","mode0_VC2","mode0_VC3";
	sensor2_ch_mode0: sensor2-ch-mode0 {
		reg = <0x150C3000 0x100>, /* DMA2 VC0 */
			<0x150C3400 0x100>, /* DMA2 Common */
			<0x150C3100 0x100>, /* DMA2 VC1 */
			<0x150C3400 0x100>, /* DMA2 Common */
			<0x150C3200 0x100>, /* DMA2 VC2 */
			<0x150C3400 0x100>, /* DMA2 Common */
			<0x150C3300 0x100>, /* DMA2 VC3 */
			<0x150C3400 0x100>; /* DMA2 Common */
		mux_reg = <0x1502041C 0x4>; /* DMA2 input mux */
	};

};

&is_sensor3 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;    /* Normal, Vision, OIS etc */
	id = <2>;
	csi_ch = <3>;
	dma_ch = <3 3 3 3>;
	vc_ch = <0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	is_bns = <0>;
	status = "okay";

	interrupts = <0 INTREQ__CSIS3 IRQ_TYPE_LEVEL_HIGH>, /* MIPI-CSI2 */
		<0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>,
		<0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
		"mode0_VC0", "mode0_VC1","mode0_VC2","mode0_VC3";
	/* without PAF HW */
	sensor3_ch_mode0: sensor3-ch-mode0 {
		reg = <0x150C4000 0x100>, /* DMA3 VC0 */
			<0x150C4400 0x100>, /* DMA3 Common */
			<0x150C4100 0x100>, /* DMA3 VC1 */
			<0x150C4400 0x100>, /* DMA3 Common */
			<0x150C4200 0x100>, /* DMA3 VC2 */
			<0x150C4400 0x100>, /* DMA3 Common */
			<0x150C4300 0x100>, /* DMA3 VC3 */
			<0x150C4400 0x100>; /* DMA3 Common */
		mux_reg = <0x15020420 0x4>; /* DMA3 input mux */
	};
};

&is_sensor4 {
	#address-cells = <1>;
	#size-cells = <1>;
	scenario = <SENSOR_SCENARIO_NORMAL>;    /* Normal, Vision, OIS etc */
	id = <4>;
	csi_ch = <4>;
	dma_ch = <3 3 3 3>;
	vc_ch = <0 1 2 3>;
	flite_ch = <FLITE_ID_NOTHING>;
	is_bns = <0>;
	status = "okay";
	reg-names = "csi", "phy";
	interrupts = <0 INTREQ__CSIS4 IRQ_TYPE_LEVEL_HIGH>, /* MIPI-CSI4 */
		   <0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>,
		   <0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>,
		   <0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>,
		   <0 INTREQ__CSIS_DMA3 IRQ_TYPE_LEVEL_HIGH>;
	interrupt-names = "csi",
		"mode0_VC0", "mode0_VC1","mode0_VC2","mode0_VC3";
	sensor4_ch_mode0: sensor4-ch-mode0 {
		reg = <0x150C4000 0x100>, /* DMA3 VC0 */
			<0x150C4400 0x100>, /* DMA3 Common */
			<0x150C4100 0x100>, /* DMA3 VC1 */
			<0x150C4400 0x100>, /* DMA3 Common */
			<0x150C4200 0x100>, /* DMA3 VC2 */
			<0x150C4400 0x100>, /* DMA3 Common */
			<0x150C4300 0x100>, /* DMA3 VC3 */
			<0x150C4400 0x100>; /* DMA3 Common */
		mux_reg = <0x15020420 0x4>; /* DMA3 input mux */
	};
};

/* FLASH-LED : leds-s2mu106 */
&hsi2c_5 {
	s2mu106@3D {
		reg = <0x3D>;
		pinctrl-names = "default","flash_suspend";
		pinctrl-1 = <&flash_off_state>;
		flash_led {
			default_current = <50>;
			max_current = <200>;
			default_timer = <0>;
			flash-gpio = <&gpp3 0 0>;
			torch-gpio = <&gpp3 1 0>;
			flash_current = <1400>;
			preflash_current = <200>;
			torch_current = <125>;
			movie_current = <200>;
			factory_current = <350>;
			flashlight_current = <50 80 100 180 240>;
			status = "okay";
		};
	};
};

