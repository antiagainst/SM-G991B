// SPDX-License-Identifier: GPL-2.0
/*
 * Samsung Exynos SoC series Pablo driver
 * Pablo v9.1 specific functions
 *
 * Copyright (c) 2020 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef IS_HW_CHAIN_V9_1_H
#define IS_HW_CHAIN_V9_1_H

#include "is-hw-api-common.h"
#include "is-groupmgr.h"
#include "is-config.h"

enum sysreg_csis_reg_name {
	SYSREG_R_CSIS_MEMCLK,
	SYSREG_R_CSIS_POWER_FAIL_DETECT,
	SYSREG_R_CSIS_EMA_STATUS,
	SYSREG_R_CSIS_CSIS_FRAME_ID_EN,
	SYSREG_R_CSIS_CSISX6_SC_PDP_IN_EN,
	SYSREG_R_CSIS_CSISX6_SC_CON0,
	SYSREG_R_CSIS_CSISX6_SC_CON1,
	SYSREG_R_CSIS_CSISX6_SC_CON2,
	SYSREG_R_CSIS_CSISX6_SC_CON3,
	SYSREG_R_CSIS_CSISX6_SC_CON4,
	SYSREG_R_CSIS_CSISX6_SC_CON5,
	SYSREG_R_CSIS_CSISX6_SC_CON6,
	SYSREG_R_CSIS_CSISX6_SC_CON7,
	SYSREG_R_CSIS_PDP_VC_CON0,
	SYSREG_R_CSIS_PDP_VC_CON1,
	SYSREG_R_CSIS_PDP_VC_CON2,
	SYSREG_R_CSIS_PDP_VC_CON3,
	SYSREG_R_CSIS_LH_GLUE_CON,
	SYSREG_R_CSIS_LH_GLUE_INT_CON,
	SYSREG_R_CSIS_CSIS0_FRAME_ID_EN,
	SYSREG_R_CSIS_CSIS1_FRAME_ID_EN,
	SYSREG_R_CSIS_CSIS2_FRAME_ID_EN,
	SYSREG_R_CSIS_CSIS3_FRAME_ID_EN,
	SYSREG_R_CSIS_CSIS4_FRAME_ID_EN,
	SYSREG_R_CSIS_CSIS5_FRAME_ID_EN,
	SYSREG_R_CSIS_MIPI_PHY_CON,
	SYSREG_CSIS_REG_CNT
};

enum sysreg_taa_reg_name {
	SYSREG_R_TAA_MEMCLK,
	SYSREG_R_TAA_TAA_USER_CON0,
	SYSREG_R_TAA_TAA_USER_CON1,
	SYSREG_R_TAA_LH_QACTIVE_CON,
	SYSREG_TAA_REG_CNT
};

enum sysreg_mcfp0_reg_name {
	SYSREG_R_MCFP0_MEMCLK,
	SYSREG_MCFP0_REG_CNT
};

enum sysreg_mcfp1_reg_name {
	SYSREG_R_MCFP1_MEMCLK,
	SYSREG_MCFP1_REG_CNT
};

enum sysreg_dns_reg_name {
	SYSREG_R_DNS_MEMCLK,
	SYSREG_R_DNS_DNS_USER_CON0,
	SYSREG_R_DNS_DNS_USER_CON1,
	SYSREG_R_DNS_DNS_USER_CON5,
	SYSREG_DNS_REG_CNT
};

enum sysreg_itp_reg_name {
	SYSREG_R_ITP_MEMCLK,
	SYSREG_R_ITP_ITP_USER_CON,
	SYSREG_ITP_REG_CNT
};

enum sysreg_yuvpp_reg_name {
	SYSREG_R_YUVPP_MEMCLK,
	SYSREG_R_YUVPP_YUVPP_USER_CON3,
	SYSREG_YUVPP_REG_CNT
};

enum sysreg_mcsc_reg_name {
	SYSREG_R_MCSC_MEMCLK,
	SYSREG_R_MCSC_MCSC_USER_CON2,
	SYSREG_MCSC_REG_CNT
};

enum sysreg_lme_reg_name {
	SYSREG_R_LME_MEMCLK,
	SYSREG_R_LME_LME_USER_CON0,
	SYSREG_LME_REG_CNT
};

enum sysreg_csis_reg_field {
	SYSREG_F_CSIS_EN,
	SYSREG_F_CSIS_PFD_AVDD085_MIPI_CPHY_STAT,
	SYSREG_F_CSIS_PFD_AVDD085_MIPI_CPHY,
	SYSREG_F_CSIS_SFR_ENABLE,
	SYSREG_F_CSIS_WIDTH_DATA2REQ,
	SYSREG_F_CSIS_EMA_BUSY,
	SYSREG_F_CSIS_FRAME_ID_EN_CSIS0,
	SYSREG_F_CSIS_PDP3_IN_CSIS5_EN,
	SYSREG_F_CSIS_PDP3_IN_CSIS4_EN,
	SYSREG_F_CSIS_PDP3_IN_CSIS3_EN,
	SYSREG_F_CSIS_PDP3_IN_CSIS2_EN,
	SYSREG_F_CSIS_PDP3_IN_CSIS1_EN,
	SYSREG_F_CSIS_PDP3_IN_CSIS0_EN,
	SYSREG_F_CSIS_PDP2_IN_CSIS5_EN,
	SYSREG_F_CSIS_PDP2_IN_CSIS4_EN,
	SYSREG_F_CSIS_PDP2_IN_CSIS3_EN,
	SYSREG_F_CSIS_PDP2_IN_CSIS2_EN,
	SYSREG_F_CSIS_PDP2_IN_CSIS1_EN,
	SYSREG_F_CSIS_PDP2_IN_CSIS0_EN,
	SYSREG_F_CSIS_PDP1_IN_CSIS5_EN,
	SYSREG_F_CSIS_PDP1_IN_CSIS4_EN,
	SYSREG_F_CSIS_PDP1_IN_CSIS3_EN,
	SYSREG_F_CSIS_PDP1_IN_CSIS2_EN,
	SYSREG_F_CSIS_PDP1_IN_CSIS1_EN,
	SYSREG_F_CSIS_PDP1_IN_CSIS0_EN,
	SYSREG_F_CSIS_PDP0_IN_CSIS5_EN,
	SYSREG_F_CSIS_PDP0_IN_CSIS4_EN,
	SYSREG_F_CSIS_PDP0_IN_CSIS3_EN,
	SYSREG_F_CSIS_PDP0_IN_CSIS2_EN,
	SYSREG_F_CSIS_PDP0_IN_CSIS1_EN,
	SYSREG_F_CSIS_PDP0_IN_CSIS0_EN,
	SYSREG_F_CSIS_GLUEMUX_PDP0_VAL,
	SYSREG_F_CSIS_GLUEMUX_PDP1_VAL,
	SYSREG_F_CSIS_GLUEMUX_PDP2_VAL,
	SYSREG_F_CSIS_GLUEMUX_PDP3_VAL,
	SYSREG_F_CSIS_GLUEMUX_CSIS_DMA0_OTF_SEL,
	SYSREG_F_CSIS_GLUEMUX_CSIS_DMA1_OTF_SEL,
	SYSREG_F_CSIS_GLUEMUX_CSIS_DMA2_OTF_SEL,
	SYSREG_F_CSIS_GLUEMUX_CSIS_DMA3_OTF_SEL,
	SYSREG_F_CSIS_MUX_IMG_VC_PDP0,
	SYSREG_F_CSIS_MUX_AF_VC_PDP0,
	SYSREG_F_CSIS_MUX_IMG_VC_PDP1,
	SYSREG_F_CSIS_MUX_AF_VC_PDP1,
	SYSREG_F_CSIS_MUX_IMG_VC_PDP2,
	SYSREG_F_CSIS_MUX_AF_VC_PDP2,
	SYSREG_F_CSIS_MUX_IMG_VC_PDP3,
	SYSREG_F_CSIS_MUX_AF_VC_PDP3,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_ZOTF3_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_ZOTF2_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_ZOTF1_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_ZOTF0_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_SOTF3_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_SOTF2_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_SOTF1_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_SOTF0_TAACSIS,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_OTF3_CSISTAA,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_OTF2_CSISTAA,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_OTF1_CSISTAA,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_OTF0_CSISTAA,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF3_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF2_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF1_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF0_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF3_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF2_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF1_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF0_PDPCSIS,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF3_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF2_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF1_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHM_AST_GLUE_INT_OTF0_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF3_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF2_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF1_CSISPDP,
	SYSREG_F_CSIS_SW_RESETN_LHS_AST_GLUE_INT_OTF0_CSISPDP,
	SYSREG_F_CSIS_FID_LOC_BYTE,
	SYSREG_F_CSIS_FID_LOC_LINE,
	SYSREG_F_CSIS_FRAME_ID_EN_CSIS,
	SYSREG_F_CSIS_MIPI_RESETN_DPHY_S1,
	SYSREG_F_CSIS_MIPI_RESETN_DPHY_S,
	SYSREG_F_CSIS_MIPI_RESETN_DCPHY_S3,
	SYSREG_F_CSIS_MIPI_RESETN_DCPHY_S2,
	SYSREG_F_CSIS_MIPI_RESETN_DCPHY_S1,
	SYSREG_F_CSIS_MIPI_RESETN_DCPHY_S,
	SYSREG_CSIS_REG_FIELD_CNT
};

enum sysreg_taa_reg_field {
	SYSREG_F_TAA_EN,
	SYSREG_F_TAA_SW_RESETN_C2R_TAA1,
	SYSREG_F_TAA_SW_RESETN_C2R_TAA0,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_OTF_TAADNS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_SOTF3_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_SOTF2_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_SOTF1_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_SOTF0_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_ZOTF3_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_ZOTF2_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_ZOTF1_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHS_AST_GLUE_ZOTF0_TAACSIS,
	SYSREG_F_TAA_SW_RESETN_LHM_AST_GLUE_OTF3_CSISTAA,
	SYSREG_F_TAA_SW_RESETN_LHM_AST_GLUE_OTF2_CSISTAA,
	SYSREG_F_TAA_SW_RESETN_LHM_AST_GLUE_OTF1_CSISTAA,
	SYSREG_F_TAA_SW_RESETN_LHM_AST_GLUE_OTF0_CSISTAA,
	SYSREG_F_TAA_GLUEMUX_OTFOUT_SEL_0,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_OTF_TAADNS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_SOTF3_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_SOTF2_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_SOTF1_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_SOTF0_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_ZOTF3_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_ZOTF2_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_ZOTF1_TAACSIS,
	SYSREG_F_TAA_TYPE_LHS_AST_GLUE_ZOTF0_TAACSIS,
	SYSREG_F_TAA_TYPE_LHM_AST_GLUE_OTF3_CSISTAA,
	SYSREG_F_TAA_TYPE_LHM_AST_GLUE_OTF2_CSISTAA,
	SYSREG_F_TAA_TYPE_LHM_AST_GLUE_OTF1_CSISTAA,
	SYSREG_F_TAA_TYPE_LHM_AST_GLUE_OTF0_CSISTAA,
	SYSREG_F_TAA_LHS_AST_OTF_TAADNS,
	SYSREG_F_TAA_LHS_AST_ZOTF3_TAACSIS,
	SYSREG_F_TAA_LHS_AST_ZOTF2_TAACSIS,
	SYSREG_F_TAA_LHS_AST_ZOTF1_TAACSIS,
	SYSREG_F_TAA_LHS_AST_ZOTF0_TAACSIS,
	SYSREG_F_TAA_LHS_AST_SOTF3_TAACSIS,
	SYSREG_F_TAA_LHS_AST_SOTF2_TAACSIS,
	SYSREG_F_TAA_LHS_AST_SOTF1_TAACSIS,
	SYSREG_F_TAA_LHS_AST_SOTF0_TAACSIS,
	SYSREG_F_TAA_LHM_AST_OTF3_CSISTAA,
	SYSREG_F_TAA_LHM_AST_OTF2_CSISTAA,
	SYSREG_F_TAA_LHM_AST_OTF1_CSISTAA,
	SYSREG_F_TAA_LHM_AST_OTF0_CSISTAA,
	SYSREG_TAA_REG_FIELD_CNT
};

enum sysreg_mcfp0_reg_field {
	SYSREG_F_MCFP0_EN,
	SYSREG_MCFP0_REG_FIELD_CNT
};

enum sysreg_mcfp1_reg_field {
	SYSREG_F_MCFP1_EN,
	SYSREG_MCFP1_REG_FIELD_CNT
};

enum sysreg_dns_reg_field {
	SYSREG_F_DNS_EN,
	SYSREG_F_DNS_GLUEMUX_DNS0_VAL,
	SYSREG_F_DNS_AXCACHE_DNS1,
	SYSREG_F_DNS_AXCACHE_DNS0,
	SYSREG_F_DNS_C2R_DNS_SW_RESET,
	SYSREG_F_DNS_ENABLE_OTF4_IN_ITPDNS,
	SYSREG_F_DNS_ENABLE_OTF3_IN_ITPDNS,
	SYSREG_F_DNS_ENABLE_OTF2_IN_ITPDNS,
	SYSREG_F_DNS_ENABLE_OTF1_IN_ITPDNS,
	SYSREG_F_DNS_ENABLE_OTF0_IN_ITPDNS,
	SYSREG_F_DNS_ENABLE_OTF_OUT_CTL_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF_IN_CTL_ITPDNS,
	SYSREG_F_DNS_ENABLE_OTF9_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF8_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF7_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF6_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF5_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF4_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF3_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF2_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF1_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF0_OUT_DNSITP,
	SYSREG_F_DNS_ENABLE_OTF_IN_MCFP1DNS,
	SYSREG_F_DNS_ENABLE_OTF_IN_TAADNS,
	SYSREG_F_DNS_TYPE_LHM_AST_GLUE_OTF_MCFP1DNS,
	SYSREG_F_DNS_TYPE_LHM_AST_GLUE_OTF_TAADNS,
	SYSREG_F_DNS_SW_RESETN_LHM_AST_GLUE_OTF_MCFP1DNS,
	SYSREG_F_DNS_SW_RESETN_LHM_AST_GLUE_OTF_TAADNS,
	SYSREG_F_DNS_C2R_DNS_TOPBYPASS_EN,
	SYSREG_F_DNS_C2R_DNS_TOPBYPASS_SEL,
	SYSREG_DNS_REG_FIELD_CNT
};

enum sysreg_itp_reg_field {
	SYSREG_F_ITP_EN,
	SYSREG_F_ITP_SW_RESETN_LHM_AST_GLUE_OTF_MCFP1ITP,
	SYSREG_F_ITP_TYPE_LHM_AST_GLUE_OTF_MCFP1ITP,
	SYSREG_F_ITP_ENABLE_OTF_IN_MCFP1ITP,
	SYSREG_F_ITP_ENABLE_OTF4_OUT_ITPDNS,
	SYSREG_F_ITP_ENABLE_OTF3_OUT_ITPDNS,
	SYSREG_F_ITP_ENABLE_OTF2_OUT_ITPDNS,
	SYSREG_F_ITP_ENABLE_OTF1_OUT_ITPDNS,
	SYSREG_F_ITP_ENABLE_OTF0_OUT_ITPDNS,
	SYSREG_F_ITP_ENABLE_OTF_IN_CTL_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF_OUT_CTL_ITPDNS,
	SYSREG_F_ITP_ENABLE_OTF9_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF8_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF7_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF6_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF5_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF4_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF3_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF2_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF1_IN_DNSITP,
	SYSREG_F_ITP_ENABLE_OTF0_IN_DNSITP,
	SYSREG_ITP_REG_FIELD_CNT
};

enum sysreg_yuvpp_reg_field {
	SYSREG_F_YUVPP_EN,
	SYSREG_F_YUVPP_SW_RESETN_LHS_AST_GLUE_OTF_YUVPPMCSC,
	SYSREG_F_YUVPP_TYPE_LHS_AST_GLUE_OTF_YUVPPMCSC,
	SYSREG_YUVPP_REG_FIELD_CNT
};

enum sysreg_mcsc_reg_field {
	SYSREG_F_MCSC_EN,
	SYSREG_F_MCSC_SW_RESETN_LHM_AST_GLUE_OTF_YUVPPMCSC,
	SYSREG_F_MCSC_TYPE_LHM_AST_GLUE_OTF_YUVPPMCSC,
	SYSREG_F_MCSC_C2R_NPUS_MCSC_TOPBYPASS_SEL,
	SYSREG_F_MCSC_C2R_VPC_MCSC_TOPBYPASS_SEL,
	SYSREG_F_MCSC_C2R_DPUF_MCSC_TOPBYPASS_SEL,
	SYSREG_F_MCSC_C2R_NPUS_MCSC_DISABLE_SEL,
	SYSREG_F_MCSC_C2R_VPC_MCSC_DISABLE_SEL,
	SYSREG_F_MCSC_C2R_DPUF_MCSC_DISABLE_SEL,
	SYSREG_F_MCSC_C2R_NPUS_MCSC_SW_RESET,
	SYSREG_F_MCSC_C2R_VPC_MCSC_SW_RESET,
	SYSREG_F_MCSC_C2R_DPUF_MCSC_SW_RESET,
	SYSREG_F_MCSC_C2AGENT_D2_MCSC_M6S4_C2AGENT_SW_RESET,
	SYSREG_F_MCSC_C2AGENT_D1_MCSC_M6S4_C2AGENT_SW_RESET,
	SYSREG_F_MCSC_C2AGENT_D0_MCSC_M6S4_C2AGENT_SW_RESET,
	SYSREG_F_MCSC_ENABLE_OTF_IN_LHM_AST_OTF_YUVPPMCSC,
	SYSREG_MCSC_REG_FIELD_CNT
};

enum sysreg_lme_reg_field {
	SYSREG_F_LME_EN,
	SYSREG_F_LME_LME_SW_RESET,
	SYSREG_F_LME_AXCACHE_LME,
	SYSREG_LME_REG_FIELD_CNT
};

#define GROUP_HW_MAX (GROUP_SLOT_MAX)

#define IORESOURCE_CSIS_DMA	0
#define IORESOURCE_PDP_CORE0	1
#define IORESOURCE_PDP_CORE1	2
#define IORESOURCE_PDP_CORE2	3
#define IORESOURCE_PDP_CORE3	4
#define IORESOURCE_3AA0		5
#define IORESOURCE_3AA1		6
#define IORESOURCE_3AA2		7
#define IORESOURCE_3AA3		8
#define IORESOURCE_3AA_DMA_TOP	9
#define IORESOURCE_ORBMCH0	10
#define IORESOURCE_ORBMCH1	11
#define IORESOURCE_LME		12
#define IORESOURCE_ITP		13
#define IORESOURCE_MCFP0	14
#define IORESOURCE_MCFP1	15
#define IORESOURCE_DNS		16
#define IORESOURCE_YUVPP	17
#define IORESOURCE_MCSC		18

#define GROUP_SENSOR_MAX_WIDTH	13696
#define GROUP_SENSOR_MAX_HEIGHT	9000
#define GROUP_PDP_MAX_WIDTH	13696
#define GROUP_PDP_MAX_HEIGHT	9000
#define GROUP_3AA_MAX_WIDTH	13696
#define GROUP_3AA_MAX_HEIGHT	9000
#define GROUP_ITP_MAX_WIDTH	5760
#define GROUP_ITP_MAX_HEIGHT	4352
#define GROUP_VRA_MAX_WIDTH	640
#define GROUP_VRA_MAX_HEIGHT	480
#define GROUP_CLAHE_MAX_WIDTH	12000
#define GROUP_CLAHE_MAX_HEIGHT	9000
#define GROUP_LME_MAX_WIDTH	2016
#define GROUP_LME_MAX_HEIGHT	1920

/* RTA HEAP: 6MB */
#define IS_RESERVE_LIB_SIZE	(0x00600000)

/* ME/DRC DMA: Moved to user space */
#define TAAISP_MEDRC_SIZE	(0)

/* ORBMCH DMA: Moved to user space */
#define TAAISP_ORBMCH_SIZE	(0)

/* DDK DMA: 1.418MB */
/* 247840 bytes per 1 3AA */
/* Max 6 instances are supported */
#define IS_TAAISP_SIZE		(0x0016B0C0)

/* TNR DMA: 158.38 MB*/
/* Image: ((Max width * Max height * 14 / 8) + 16) * 2 * 3 */
/* Weight: ((Max width * Max height / 2 / 2) * 2 * 3) */
/* Max width: 4880, Max height: 3660 depends on scenario */
/* Max 3 instances are supported with SBWC margin (1.05) */
/* not used for reprocessing instance */
/* Motion (preview): ((Max width / 32) * (Max height / 32) * 4) */
/* Max width: 7680, Max height: 4320 depends on scenario */
/* Max 8 buffers, 3 instances */
/* Motion (reprocessing): ((Max width / 32) * (Max height / 32) * 4) */
/* Max width: 4880, Max height: 3660 depends on scenario */
/* Max 7 buffers, 3 instances */
/* Total motion buffer: 0x45abc0 (4565952 bytes) */
#define TAAISP_TNR_SIZE		(0x09E61BC0)

/* Secure TNR DMA: 7.3 MB*/
#define TAAISP_TNR_S_SIZE	(0x00757B40)

/* CLAHE DMA: Moved to user space */
#define IS_CLAHE_SIZE		(0)

/* VRA: HW is removed */
#define IS_VRA_SIZE		(0)

/* DDK HEAP: 90MB */
#define IS_HEAP_SIZE		(0x05A00000)

/* SETFILE: 16MB */
#define IS_SETFILE_SIZE		(0x01000000)

/* Rule checker size for DDK */
#define IS_RCHECKER_SIZE_RO	(SZ_4M + SZ_1M)
#define IS_RCHECKER_SIZE_RW	(SZ_256K)

#define SYSREG_CSIS_BASE_ADDR	(0x17020000)
#define SYSREG_TAA_BASE_ADDR	(0x16E20000)
#define SYSREG_MCFP0_BASE_ADDR	(0x17820000)
#define SYSREG_MCFP1_BASE_ADDR	(0x17A20000)
#define SYSREG_ITP_BASE_ADDR	(0x17420000)
#define SYSREG_DNS_BASE_ADDR	(0x17520000)
#define SYSREG_YUVPP_BASE_ADDR	(0x18020000)
#define SYSREG_MCSC_BASE_ADDR	(0x15C20000)
#define SYSREG_LME_BASE_ADDR	(0x17720000)

#define HWFC_INDEX_RESET_ADDR	(0x15C71050)

enum taaisp_chain_id {
	ID_3AA_0 = 0, /* LME/ORBMCH/DMA/3AA0 */
	ID_3AA_1 = 1, /* LME/ORBMCH/DMA/3AA1 */
	ID_3AA_2 = 2, /* LME/ORBMCH/DMA/3AA2 */
	ID_3AA_3 = 3, /* LME/ORBMCH/DMA/3AA2 */
	ID_ISP_0 = 4, /* MCFP/DNS/ITP0 */
	ID_YPP	 = 5, /* YUVPP */
	ID_LME_0 = 6, /* LME */
	ID_LME_1 = 7, /* Not used */
	ID_ISP_1 = 8, /* Not used */
	ID_CLH_0 = 9, /* Not used */
	ID_3AAISP_MAX
};

/* the number of interrupt source at each IP */
enum hwip_interrupt_map {
	INTR_HWIP1 = 0,
	INTR_HWIP2 = 1,
	INTR_HWIP3 = 2,
	INTR_HWIP4 = 3,
	INTR_HWIP5 = 4,
	INTR_HWIP6 = 5,
	INTR_HWIP7 = 6,
	INTR_HWIP8 = 7,
	INTR_HWIP9 = 8,
	INTR_HWIP10 = 9,
	INTR_HWIP_MAX
};

enum ext_chain_id {
	ID_ORBMCH_0 = 0,
	ID_ORBMCH_1 = 1,
};

enum internal_dma_map {
	ID_DMA_3AAISP = 0,
	ID_DMA_MEDRC = 1,
	ID_DMA_ORBMCH = 2,
	ID_DMA_TNR = 3,
	ID_DMA_CLAHE = 4,
	ID_DMA_MAX
};

#define INTR_ID_BASE_OFFSET	(INTR_HWIP_MAX)
#define GET_IRQ_ID(y, x)	(x - (INTR_ID_BASE_OFFSET * y))
#define valid_3aaisp_intr_index(intr_index) \
	(intr_index >= 0 && intr_index < INTR_HWIP_MAX)

/* TODO: update below for 9830 */
/* Specific interrupt map belonged to each IP */

/* MC-Scaler */
#define USE_DMA_BUFFER_INDEX		(0) /* 0 ~ 7 */
#define MCSC_OFFSET_ALIGN		(2)
#define MCSC_WIDTH_ALIGN		(4)
#define MCSC_HEIGHT_ALIGN		(2)
#define MCSC_PRECISION			(20)
#define MCSC_POLY_RATIO_UP		(25)
#define MCSC_POLY_QUALITY_RATIO_DOWN	(4)
#define MCSC_POLY_RATIO_DOWN		(16)
#define MCSC_POLY_MAX_RATIO_DOWN	(256)
#define MCSC_POST_RATIO_DOWN		(16)
#define MCSC_POST_MAX_WIDTH		(1440)
#define MCSC_FLIP_WA
/* #define MCSC_POST_WA */
/* #define MCSC_POST_WA_SHIFT	(8)*/	/* 256 = 2^8 */
#define MCSC_USE_DEJAG_TUNING_PARAM	(true)
/* #define MCSC_DNR_USE_TUNING		(true) */	/* DNR and DJAG TUNING PARAM are used exclusively. */
#define MCSC_SETFILE_VERSION		(0x14027435)
#define MCSC_DJAG_ENABLE_SENSOR_BRATIO	(2000)
#define MCSC_LINE_BUF_SIZE		(5760)
#define HWFC_DMA_ID_OFFSET		(8)
#define ENTRY_HF			ENTRY_M5P	/* Subdev ID of MCSC port for High Frequency */
#define CAC_G2_VERSION

enum mc_scaler_interrupt_map {
	INTR_MC_SCALER_FRAME_END			= 0,
	INTR_MC_SCALER_FRAME_START			= 1,
	INTR_MC_SCALER_WDMA_FINISH			= 2,
	INTR_MC_SCALER_CORE_FINISH			= 3,
	INTR_MC_SCALER_INPUT_HORIZONTAL_OVF		= 7,
	INTR_MC_SCALER_INPUT_HORIZONTAL_UNF		= 8,
	INTR_MC_SCALER_INPUT_VERTICAL_OVF		= 9,
	INTR_MC_SCALER_INPUT_VERTICAL_UNF		= 10,
	INTR_MC_SCALER_OVERFLOW				= 11,
	INTR_MC_SCALER_OUTSTALL				= 12,	/* INPUT_FRAME_CRUSH */
	INTR_MC_SCALER_COREX_COPY_FINISH		= 16,
	INTR_MC_SCALER_COREX_ERROR			= 17,
	INTR_MC_SCALER_COREX_CMD_QUE_FULL		= 18,
	INTR_MC_SCALER_FM_SUB_FRAME_FINISH		= 20,
	INTR_MC_SCALER_FM_SUB_FRAME_START		= 21,
	INTR_MC_SCALER_STALL_TIMEOUT			= 24,
	INTR_MC_SCALER_COMP_DEC_ERR			= 25,
	INTR_MC_SCALER_VOTF_RDMA0_ERR_LOST      	= 27,
	INTR_MC_SCALER_VOTF_RDMA_SLOW_RING_STATUS       = 28,
	INTR_MC_SCALER_VOTF_RDMA_LOST_FLUSH           	= 29,
	INTR_MC_SCALER_VOTF_WDMA_LOST_FLUSH             = 30,
	INTR_MC_SCALER_VOTF_WDMA_SLOW_RING_STATUS       = 31,
};
#define MCSC_INTR_MASK		((1 << INTR_MC_SCALER_WDMA_FINISH) \
				| (1 << INTR_MC_SCALER_CORE_FINISH) \
				| (1 << INTR_MC_SCALER_OUTSTALL) \
				| (1 << INTR_MC_SCALER_FM_SUB_FRAME_START) \
				| (1 << INTR_MC_SCALER_FM_SUB_FRAME_FINISH))

/* TODO: remove this, compile check only */
/* VRA */
#define VRA_CH1_INTR_CNT_PER_FRAME	(6)

/* Deprecated register. These are maintained for backward compatibility */
enum vra_chain0_interrupt_map {
	CH0INT_CIN_FR_ST			= 0,
	CH0INT_CIN_FR_END			= 1,
	CH0INT_CIN_LINE_ST			= 2,
	CH0INT_CIN_LINE_END			= 3,
	CH0INT_CIN_SP_LINE			= 4,
	CH0INT_CIN_ERR_SIZES			= 5,
	CH0INT_CIN_ERR_YUV_FORMAT		= 6,
	CH0INT_CIN_FR_ST_NO_ACTIVE		= 7,
	CH0INT_DMA_IN_ERROR			= 8,
	CH0INT_DMA_IN_FLUSH_DONE		= 9,
	CH0INT_DMA_IN_FR_END			= 10,
	CH0INT_DMA_IN_INFO			= 11,
	CH0INT_OUT_DMA_ERROR			= 12,
	CH0INT_OUT_DMA_FLUSH_DONE		= 13,
	CH0INT_OUT_DMA_FR_END			= 14,
	CH0INT_OUT_DMA_INFO			= 15,
	CH0INT_RWS_TRIGGER			= 16,
	CH0INT_END_FRAME			= 17,
	CH0INT_END_ISP_DMA_OUT			= 18,
	CH0INT_END_ISP_INPUT			= 19,
	CH0INT_FRAME_SIZE_ERROR			= 20,
	CH0INT_ERR_FR_ST_BEF_FR_END		= 21,
	CH0INT_ERR_FR_ST_WHILE_FLUSH		= 22,
	CH0INT_ERR_VRHR_INTERVAL_VIOLATION	= 23,
	CH0INT_ERR_HFHR_INTERVAL_VIOLATION	= 24,
	CH0INT_ERR_PYRAMID_OVERFLOW		= 25
};

enum vra_chain1_interrupt_map {
	CH1INT_IN_CONT_SP_LINE		= 0,
	CH1INT_IN_STOP_IMMED_DONE	= 1,
	CH1INT_IN_END_OF_CONTEXT	= 2,
	CH1INT_IN_START_OF_CONTEXT	= 3,
	CH1INT_END_LOAD_FEATURES	= 4,
	CH1INT_SHADOW_TRIGGER		= 5,
	CH1INT_OUT_OVERFLOW		= 6,
	CH1INT_MAX_NUM_RESULTS		= 7,

	CH1INT_IN_ERROR			= 8,
	CH1INT_IN_FLUSH_DONE		= 9,
	CH1INT_IN_FR_END		= 10,
	CH1INT_IN_INFO			= 11,

	CH1INT_OUT_ERROR		= 12,
	CH1INT_OUT_FLUSH_DONE		= 13,
	CH1INT_OUT_FR_END		= 14,
	CH1INT_OUT_INFO			= 15,
	CH1INT_WATCHDOG			= 16
};

#define CSIS0_QCH_EN_ADDR		(0x17030004)
#define CSIS1_QCH_EN_ADDR		(0x17040004)
#define CSIS2_QCH_EN_ADDR		(0x17050004)
#define CSIS3_QCH_EN_ADDR		(0x17060004)
#define CSIS3_1_QCH_EN_ADDR		(0x17090004)

#define ALIGN_UPDOWN_STRIPE_WIDTH(w, align) \
	(w & (align) >> 1 ? ALIGN(w, (align)) : ALIGN_DOWN(w, (align)))

int exynos991_is_dump_clk(struct device *dev);

enum taa_output_map {
	TAA_OUTPUT_MAX = -1		/* there is no RDMA for 3AA */
};

enum taa_capture_map {
	TAA_WDMA_STRP = 0,
	TAA_WDMA_ZSL,
	TAA_WDMA_MERGE,
	TAA_WDMA_DRCC,
	TAA_WDMA_FDPIG,
	TAA_WDMA_ORBDS,
	TAA_WDMA_LMEDS,
	TAA_CAPTURE_MAX
};

enum isp_output_map {
	MCFP_RDMA_BAYER = 0,		/* leader */
	DNS_RDMA_BAYER,
	ISP_OUTPUT_MAX
};

enum isp_capture_map {
	MCFP_RDMA_PREV_BAYER = 0,	/* capture */
	MCFP_RDMA_PREV_WEIGHT,
	MCFP_RDMA_MOTION,
	DNS_RDMA_RGB,
	DNS_RDMA_SEGCONF_MAP,
	DNS_RDMA_DRCGRID,
	DNS_RDMA_NOISE,
	MCFP_WDMA_PREV_BAYER,
	MCFP_WDMA_PREV_WEIGHT,
	DNS_WDMA_YUV,
	DNS_WDMA_NRDS_YUV,
	DNS_WDMA_DRCGAIN,
	DNS_WDMA_HIST,
	DNS_WDMA_HF,			/* HF and Noise share the same WDMA */
	DNS_WDMA_NOISE,
	DNS_WDMA_NOISE_REP,
	DNS_WDMA_RGB,
	DNS_WDMA_BAYER_BNR,		/* BNR BAYER and R share the same WDMA */
	ISP_CAPTURE_MAX
};

enum yuvpp_output_map {
	YPP_RDMA_YUV = 0,		/* leader */
	YPP_OUTPUT_MAX
};

enum yuvpp_capture_map {
	YPP_RDMA_NRDS_YUV = 0,		/* capture */
	YPP_RDMA_DRCGAIN,
	YPP_RDMA_HIST,
	YPP_RDMA_NOISE,
	YPP_CAPTURE_MAX
};

static char * const taa_capture_name[TAA_CAPTURE_MAX] = {
	"TAA_W_STRP",
	"TAA_W_ZSL",
	"TAA_W_MERGE",
	"TAA_W_DRCC",
	"TAA_W_FDPIG",
	"TAA_W_ORBDS",
	"TAA_W_LMEDS"
};

static char * const isp_output_name[ISP_OUTPUT_MAX] = {
	"MCFP_R_BAYER",
	"DNS_R_BAYER"
};

static char * const isp_capture_name[ISP_CAPTURE_MAX] = {
	"MCFP_R_PREV_BAYER",
	"MCFP_R_PREV_WGT",
	"MCFP_R_MOTION",
	"DNS_R_RGB",
	"DNS_R_MAP",
	"DNS_R_DRCGR",
	"DNS_R_NOISE"
	"MCFP_W_PREV_BAYER",
	"MCFP_W_PREV_WGT",
	"DNS_W_YUV",
	"DNS_W_NRDS",
	"DNS_W_DRCGA",
	"DNS_W_HIST",
	"DNS_W_HF",
	"DNS_W_NOISE",
	"DNS_W_NOISER",
	"DNS_W_RGB",
	"DNS_W_BAYER_BNR"
};

static char * const yuvpp_output_name[YPP_OUTPUT_MAX] = {
	"YPP_R_YUV",
};

static char * const yuvpp_capture_name[YPP_CAPTURE_MAX] = {
	"YPP_R_NRDS_YUV",
	"YPP_R_DRCGAIN",
	"YPP_R_HIST",
	"YPP_R_NOISE"
};

#define IS_LLC_CACHE_HINT_SHIFT 4

enum is_llc_cache_hint {
	IS_LLC_CACHE_HINT_INVALID = 0,
	IS_LLC_CACHE_HINT_BYPASS_TYPE,
	IS_LLC_CACHE_HINT_CACHE_ALLOC_TYPE,
	IS_LLC_CACHE_HINT_CACHE_NOALLOC_TYPE,
	IS_LLC_CACHE_HINT_VOTF_TYPE,
	IS_LLC_CACHE_HINT_LAST_BUT_SHARED,
	IS_LLC_CACHE_HINT_NOT_USED_FAR,
	IS_LLC_CACHE_HINT_LAST_ACCESS,
	IS_LLC_CACHE_HINT_MAX
};

enum is_llc_sn {
	IS_LLC_SN_DEFAULT = 0,
	IS_LLC_SN_FHD,
	IS_LLC_SN_UHD,
	IS_LLC_SN_8K,
	IS_LLC_SN_PREVIEW,
	IS_LLC_SN_END,
};

struct is_llc_way_num {
	int votf;
	int mcfp;
};

#endif
