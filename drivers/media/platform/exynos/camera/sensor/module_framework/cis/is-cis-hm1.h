/*
 * Samsung Exynos SoC series Sensor driver
 *
 *
 * Copyright (c) 2016 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef IS_CIS_HM1_H
#define IS_CIS_HM1_H

#include "is-cis.h"

#define EXT_CLK_Mhz (26)

#define SENSOR_HM1_MAX_WIDTH		(12000 + 0)
#define SENSOR_HM1_MAX_HEIGHT		(9000 + 0)

#define SENSOR_HM1_FINE_INTEGRATION_TIME_MIN                0x100
#define SENSOR_HM1_FINE_INTEGRATION_TIME_MAX                0x100
#define SENSOR_HM1_COARSE_INTEGRATION_TIME_MIN              0x3
#define SENSOR_HM1_COARSE_INTEGRATION_TIME_MAX_MARGIN       0xC

#define USE_GROUP_PARAM_HOLD	(0)

#define HM1_BURST_WRITE
#define HM1_CAL_ROW_LEN	(3)
#define HM1_CAL_START_ADDR	(0)
#define HM1_CAL_END_ADDR	(1)
#define HM1_CAL_BURST_CHECK	(2)

enum sensor_hm1_mode_enum {
	SENSOR_HM1_12000X9000_10FPS = 0,
	SENSOR_HM1_7200X5400_14FPS = 1,
	SENSOR_HM1_7680X4320_24FPS = 2,
	SENSOR_HM1_4000X2252_30FPS_CENTER_CROP = 3,
	SENSOR_HM1_4000X3000_30FPS = 4,
	SENSOR_HM1_4000X3000_30FPS_DECOMP_TIMING = 5,
	SENSOR_HM1_4000X3000_30FPS_FULL_DILLUTION = 6,
	SENSOR_HM1_4000X2252_30FPS = 7,
	SENSOR_HM1_4000X2252_30FPS_FULL_DILLUTION = 8,
	SENSOR_HM1_4000X3000_60FPS = 9,
	SENSOR_HM1_4000X2252_60FPS = 10,
	SENSOR_HM1_3840X2160_120FPS = 11,
	SENSOR_HM1_3328X1872_120FPS = 12,
	SENSOR_HM1_1984X1488_30FPS = 13,
	SENSOR_HM1_1920X1080_240FPS = 14,
	SENSOR_HM1_1920X1080_120FPS = 15,
	SENSOR_HM1_992X744_120FPS = 16,
	SENSOR_HM1_4000X3000_30FPS_SHORT = 17,
	SENSOR_HM1_4000X3000_30FPS_SHORT_DECOMP_TIMING = 18,
	SENSOR_HM1_4000X3000_30FPS_SHORT_FULL_DILLUTION = 19,
	SENSOR_HM1_4000X2252_30FPS_SHORT = 20,
	SENSOR_HM1_MODE_MAX,
};

enum hm1_endian {
	HM1_LITTLE_ENDIAN = 0,
	HM1_BIG_ENDIAN = 1,
};

#define HM1_ENDIAN(a, b, endian)  ((endian == HM1_BIG_ENDIAN) ? ((a << 8)|(b)) : ((a)|(b << 8)))

static bool sensor_hm1_support_wdr[] = {
	false, //SENSOR_HM1_12000X9000_10FPS = 0,
	false, //SENSOR_HM1_7200X5400_14FPS = 1,
	false, //SENSOR_HM1_7680X4320_24FPS = 2,
	false, //SENSOR_HM1_4000X2252_30FPS_CENTER_CROP = 3,
	false, //SENSOR_HM1_4000X3000_30FPS = 4,
	false, //SENSOR_HM1_4000X3000_30FPS_DECOMP_TIMING = 5,
	false, //SENSOR_HM1_4000X3000_30FPS_FULL_DILLUTION = 6,
	false, //SENSOR_HM1_4000X2252_30FPS = 7,
	false, //SENSOR_HM1_4000X2252_30FPS_FULL_DILLUTION = 8,
	false, //SENSOR_HM1_4000X3000_60FPS = 9,
	false, //SENSOR_HM1_4000X2252_60FPS = 10,
	false, //SENSOR_HM1_3840X2160_120FPS = 11,
	false, //SENSOR_HM1_3328X1872_120FPS = 12,
	false, //SENSOR_HM1_1984X1488_30FPS = 13,
	false, //SENSOR_HM1_1920X1080_240FPS = 14,
	false, //SENSOR_HM1_1920X1080_120FPS = 15,
	false, //SENSOR_HM1_992X744_120FPS = 16,
	false, //SENSOR_HM1_4000X3000_30FPS_SHORT = 17,
	false, //SENSOR_HM1_4000X3000_30FPS_SHORT_DECOMP_TIMING = 18,
	false, //SENSOR_HM1_4000X3000_30FPS_SHORT_FULL_DILLUTION = 19,
	false, //SENSOR_HM1_4000X2252_30FPS_SHORT = 20,
};

static bool sensor_hm1_support_wb_gain[] = {
	true, //SENSOR_HM1_12000X9000_10FPS = 0,
	true, //SENSOR_HM1_7200X5400_14FPS = 1,
	true, //SENSOR_HM1_7680X4320_24FPS = 2,
	false, //SENSOR_HM1_4000X2252_30FPS_CENTER_CROP = 3,
	false, //SENSOR_HM1_4000X3000_30FPS = 4,
	false, //SENSOR_HM1_4000X3000_30FPS_DECOMP_TIMING = 5,
	false, //SENSOR_HM1_4000X3000_30FPS_FULL_DILLUTION = 6,
	false, //SENSOR_HM1_4000X2252_30FPS = 7,
	false, //SENSOR_HM1_4000X2252_30FPS_FULL_DILLUTION = 8,
	false, //SENSOR_HM1_4000X3000_60FPS = 9,
	false, //SENSOR_HM1_4000X2252_60FPS = 10,
	false, //SENSOR_HM1_3840X2160_120FPS = 11,
	false, //SENSOR_HM1_3328X1872_120FPS = 12,
	false, //SENSOR_HM1_1984X1488_30FPS = 13,
	false, //SENSOR_HM1_1920X1080_240FPS = 14,
	false, //SENSOR_HM1_1920X1080_120FPS = 15,
	false, //SENSOR_HM1_992X744_120FPS = 16,
	false, //SENSOR_HM1_4000X3000_30FPS_SHORT = 17,
	false, //SENSOR_HM1_4000X3000_30FPS_SHORT_DECOMP_TIMING = 18,
	false, //SENSOR_HM1_4000X3000_30FPS_SHORT_FULL_DILLUTION = 19,
	false, //SENSOR_HM1_4000X2252_30FPS_SHORT = 20,
};

/* dual sync - indirect */
static const u32 sensor_hm1_cis_dual_master_settings[] = {
	0xFCFC,	0x4000,	0x02,
	0x6000,	0x0085,	0x02,
	0x0A70,	0x0001,	0x02,
	0x0A72,	0x0100,	0x02,
	0x0A74,	0x0000,	0x02,
	0x0A76,	0x0000,	0x02,
	0x0A78,	0x0000,	0x02,
	0x0A7A,	0x0001,	0x02,
	0x0A7C,	0x0100,	0x02,
	0x0A80,	0x0018,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x142C,	0x02,
	0x6F12,	0x1420,	0x02,
	0x602A,	0x142E,	0x02,
	0x6F12,	0x0100,	0x02,
	0x602A,	0x1434,	0x02,
	0x6F12,	0x1020,	0x02,
	0x602A,	0x1446,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x14BE,	0x02,
	0x6F12,	0x0300,	0x02,
	0x602A,	0x14C0,	0x02,
	0x6F12,	0x0100,	0x02,
};

static const u32 sensor_hm1_cis_dual_master_settings_size =
	ARRAY_SIZE(sensor_hm1_cis_dual_master_settings);

static const u32 sensor_hm1_cis_dual_slave_settings[] = { /* wait for master */
	0xFCFC,	0x4000,	0x02,
	0x6000,	0x0085,	0x02,
	0x0A70,	0x0001,	0x02,
	0x0A72,	0x0001,	0x02,
	0x0A74,	0x0001,	0x02,
	0x0A76,	0x0001,	0x02,
	0x0A78,	0x0000,	0x02,
	0x0A7A,	0x0000,	0x02,
	0x0A7C,	0x0100,	0x02,
	0x0A80,	0x0018,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x142C,	0x02,
	0x6F12,	0x1420,	0x02,
	0x602A,	0x142E,	0x02,
	0x6F12,	0x0100,	0x02,
	0x602A,	0x1434,	0x02,
	0x6F12,	0x1020,	0x02,
	0x602A,	0x1446,	0x02,
	0x6F12,	0x0040,	0x02,
	0x602A,	0x14BE,	0x02,
	0x6F12,	0x0303,	0x02,
	0x602A,	0x14C0,	0x02,
	0x6F12,	0x0000,	0x02,
};

static const u32 sensor_hm1_cis_dual_slave_settings_size =
	ARRAY_SIZE(sensor_hm1_cis_dual_slave_settings);

static const u32 sensor_hm1_cis_dual_standalone_settings[] = {
	0xFCFC,	0x4000,	0x02,
	0x6000,	0x0085,	0x02,
	0x0A70,	0x0000,	0x02,
	0x0A72,	0x0000,	0x02,
	0x0A74,	0x0000,	0x02,
	0x0A76,	0x0000,	0x02,
	0x0A78,	0x0000,	0x02,
	0x0A7A,	0x0000,	0x02,
	0x0A7C,	0x0100,	0x02,
	0x0A80,	0x0018,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x142C,	0x02,
	0x6F12,	0x1420,	0x02,
	0x602A,	0x142E,	0x02,
	0x6F12,	0x0100,	0x02,
	0x602A,	0x1434,	0x02,
	0x6F12,	0x1020,	0x02,
	0x602A,	0x1446,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x14BE,	0x02,
	0x6F12,	0x0300,	0x02,
	0x602A,	0x14C0,	0x02,
	0x6F12,	0x0000,	0x02,
};

static const u32 sensor_hm1_cis_dual_standalone_settings_size =
	ARRAY_SIZE(sensor_hm1_cis_dual_standalone_settings);

static u32 sensor_hm1_pre_PDXTC_1[] = {
	0x6028,	0x2000,	0x02,
	0x602A,	0x1382,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x59E6,	0x02,
	0x6F12,	0x0002,	0x02,
	0x602A,	0x5A14,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0014,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x6F12,	0x0100,	0x02,
	0x602A,	0x5A46,	0x02,
	0x6F12,	0x0040,	0x02,
	0x602A,	0x5A34,	0x02,
};

static u32 sensor_hm1_post_PDXTC_1[] = {
	0x602A,	0x59E8,	0x02,
	0x6F12,	0x0001,	0x02,
};

static u32 sensor_hm1_pre_PDXTC_2[] = {
#ifdef HM1_BURST_WRITE
	0x6004,	0x0001,	0x02,
#endif
	0x6028,	0x2000,	0x02,
	0x602A,	0xBE30,	0x02,
};
static u32 sensor_hm1_post_PDXTC_2[] = {};

static u32 sensor_hm1_pre_PDXTC_3[] = {};

static u32 sensor_hm1_post_PDXTC_3[] = {
	0x6004,	0x0000,	0x02,
	0x6028,	0x4000,	0x02,
	0x602A,	0x0D02,	0x02,
	0x6F12,	0x0101,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x59FA,	0x02,
	0x6F12,	0x00F0,	0x02,
	0x602A,	0x59F6,	0x02,
	0x6F12,	0x0030,	0x02,
	0x602A,	0x59EA,	0x02,
	0x6F12,	0x0707,	0x02,
	0x602A,	0x59EC,	0x02,
	0x6F12,	0x0700,	0x02,
	0x602A,	0x5A0A,	0x02,
	0x6F12,	0x0000,	0x02,
	0x6F12,	0x0000,	0x02,
	0x6F12,	0x03B6,	0x02,
	0x6F12,	0x03B6,	0x02,
	0x6F12,	0x03B6,	0x02,
	0x602A,	0x59E3,	0x02,
	0x6F12,	0x0001,	0x02,
};

static u32 * sensor_hm1_pre_PDXTC[] = {
	sensor_hm1_pre_PDXTC_1,
	sensor_hm1_pre_PDXTC_2,
	sensor_hm1_pre_PDXTC_3,
};

static const u32 sensor_hm1_pre_PDXTC_size[] = {
	ARRAY_SIZE(sensor_hm1_pre_PDXTC_1),
	ARRAY_SIZE(sensor_hm1_pre_PDXTC_2),
	ARRAY_SIZE(sensor_hm1_pre_PDXTC_3),
};

static u32 * sensor_hm1_post_PDXTC[] = {
	sensor_hm1_post_PDXTC_1,
	sensor_hm1_post_PDXTC_2,
	sensor_hm1_post_PDXTC_3,
};

static const u32 sensor_hm1_post_PDXTC_size[] = {
	ARRAY_SIZE(sensor_hm1_post_PDXTC_1),
	ARRAY_SIZE(sensor_hm1_post_PDXTC_2),
	ARRAY_SIZE(sensor_hm1_post_PDXTC_3),
};

static u32 sensor_hm1_pre_GCC_1[] = {
	0x6028,	0x2000,	0x02,
	0x602a,	0x1382,	0x02,
	0x6f12,	0x0000,	0x02,
	0x602a,	0x5ef0,	0x02,
	0x6f12,	0x0003,	0x02,
	0x6f12,	0x0201,	0x02,
#ifdef HM1_BURST_WRITE
	0x6004,	0x0001,	0x02,
#endif
	0x6028,	0x2000,	0x02,
	0x602a,	0xca00,	0x02,
};

static u32 sensor_hm1_post_GCC_1[] = {
	0x6004,	0x0000,	0x02,
	0x6028,	0x4000,	0x02,
	0x602a,	0x0d02,	0x02,
	0x6f12,	0x0101,	0x02,
};

static u32 * sensor_hm1_pre_GCC[] = {
	sensor_hm1_pre_GCC_1,
};

static const u32 sensor_hm1_pre_GCC_size[] = {
	ARRAY_SIZE(sensor_hm1_pre_GCC_1),
};

static u32 * sensor_hm1_post_GCC[] = {
	sensor_hm1_post_GCC_1,
};

static const u32 sensor_hm1_post_GCC_size[] = {
	ARRAY_SIZE(sensor_hm1_post_GCC_1),
};

static u32 sensor_hm1_pre_XTC_1[] = {
	0x6028,	0x2000,	0x02,
	0x602A,	0x4766,	0x02,
	0x6F12,	0x2598,	0x02,
	0x602A,	0x4764,	0x02,
	0x6F12,	0x3114,	0x02,
	0x602A,	0x4762,	0x02,
	0x6F12,	0x2a1e,	0x02,
	0x602A,	0x4768,	0x02,
	0x6F12,	0x011a,	0x02,
	0x602A,	0x476a,	0x02,
	0x6F12,	0x0138,	0x02,
	0x602A,	0x491a,	0x02,
	0x6F12,	0x077a,	0x02,
	0x602A,	0x48d8,	0x02,
	0x6F12,	0x0100,	0x02,
	0x602A,	0x48da,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48dc,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x4752,	0x02,
	0x6F12,	0x0001,	0x02,
	0x602A,	0x48ba,	0x02,
	0x6F12,	0x0008,	0x02,
	0x602A,	0x48bc,	0x02,
	0x6F12,	0x0806,	0x02,
	0x602A,	0x48be,	0x02,
	0x6F12,	0x0606,	0x02,
	0x602A,	0x48c0,	0x02,
	0x6F12,	0x0606,	0x02,
	0x602A,	0x48c2,	0x02,
	0x6F12,	0x0606,	0x02,
	0x602A,	0x48c4,	0x02,
	0x6F12,	0x0606,	0x02,
	0x602A,	0x48c6,	0x02,
	0x6F12,	0x0606,	0x02,
	0x602A,	0x48c8,	0x02,
	0x6F12,	0x0601,	0x02,
	0x602A,	0x48ca,	0x02,
	0x6F12,	0x050b,	0x02,
	0x602A,	0x48cc,	0x02,
	0x6F12,	0x0d0f,	0x02,
	0x602A,	0x48ce,	0x02,
	0x6F12,	0x1216,	0x02,
	0x602A,	0x48d0,	0x02,
	0x6F12,	0x1718,	0x02,
	0x602A,	0x48d2,	0x02,
	0x6F12,	0x1e1e,	0x02,
	0x602A,	0x48d4,	0x02,
	0x6F12,	0x1e1e,	0x02,
	0x602A,	0x48d6,	0x02,
	0x6F12,	0x1e1e,	0x02,
	0x602A,	0x48b6,	0x02,
	0x6F12,	0x0706,	0x02,
	0x602A,	0x48b8,	0x02,
	0x6F12,	0x0606,	0x02,
	0x602A,	0x478c,	0x02,
	0x6F12,	0x0002,	0x02,
	0x602A,	0x478e,	0x02,
	0x6F12,	0x0002,	0x02,
	0x602A,	0x4788,	0x02,
	0x6F12,	0x004c,	0x02,
	0x602A,	0x478a,	0x02,
	0x6F12,	0x0041,	0x02,
	0x602A,	0x4902,	0x02,
	0x6F12,	0x050a,	0x02,
	0x602A,	0x4904,	0x02,
	0x6F12,	0x10ff,	0x02,
	0x602A,	0x491c,	0x02,
	0x6F12,	0x29df,	0x02,
	0x602A,	0x490a,	0x02,
	0x6F12,	0x0710,	0x02,
	0x602A,	0x490c,	0x02,
	0x6F12,	0x1010,	0x02,
	0x602A,	0x490e,	0x02,
	0x6F12,	0x1010,	0x02,
	0x602A,	0x4910,	0x02,
	0x6F12,	0x100c,	0x02,
	0x602A,	0x4912,	0x02,
	0x6F12,	0x0c16,	0x02,
	0x602A,	0x4914,	0x02,
	0x6F12,	0x1615,	0x02,
	0x602A,	0x4916,	0x02,
	0x6F12,	0x1501,	0x02,
	0x602A,	0x491e,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48dc,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48de,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48e0,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48e2,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48e4,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48e6,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48e8,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48ea,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48ec,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48ee,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48f0,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48f2,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48f4,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48f6,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48f8,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48f8,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48fa,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48fc,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x48fe,	0x02,
	0x6F12,	0x0000,	0x02,
	0x602A,	0x4900,	0x02,
	0x6F12,	0x0000,	0x02,
	0x6028,	0x2001,	0x02,
	0x602A,	0x667a,	0x02,
	0x6F12,	0x0001,	0x02,
	0x6028,	0x2001,	0x02,
	0x602A,	0x6656,	0x02,
	0x6F12,	0x5115,	0x02,
	0x6028,	0x2001,	0x02,
	0x602A,	0x6664,	0x02,
	0x6F12,	0x0000,	0x02,
	0x6028,	0x2001,	0x02,
	0x602A,	0x663a,	0x02,
	0x6F12,	0x565f,	0x02,
	0x6028,	0x2001,	0x02,
	0x602A,	0x6648,	0x02,
	0x6F12,	0x0000,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4744,	0x02,
	0x6F12,	0x0002,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4916,	0x02,
	0x6F12,	0x1501,	0x02,
#ifdef HM1_BURST_WRITE
	0x6004,	0x0001,	0x02,
#endif
	0x6028,	0x200b,	0x02,
	0x602A,	0x0000,	0x02,
};
static u32 sensor_hm1_post_XTC_1[] = {};

static u32 sensor_hm1_pre_XTC_2[] = {
	0x602A,	0x03E6,	0x02,
};
static u32 sensor_hm1_post_XTC_2[] = {};

static u32 sensor_hm1_pre_XTC_3[] = {
	0x602A,	0x445c,	0x02,
};
static u32 sensor_hm1_post_XTC_3[] = {};

static u32 sensor_hm1_pre_XTC_4[] = {
	0x602A,	0x4844,	0x02,
};
static u32 sensor_hm1_post_XTC_4[] = {};

static u32 sensor_hm1_pre_XTC_5[] = {
	0x602A,	0x4C2C,	0x02,
};
static u32 sensor_hm1_post_XTC_5[] = {};

static u32 sensor_hm1_pre_XTC_6[] = {
	0x602A,	0x5014,	0x02,
};
static u32 sensor_hm1_post_XTC_6[] = {};

static u32 sensor_hm1_pre_XTC_7[] = {
	0x602A,	0x53FC,	0x02,
};
static u32 sensor_hm1_post_XTC_7[] = {};

static u32 sensor_hm1_pre_XTC_8[] = {
	0x602A,	0x57E4,	0x02,
};
static u32 sensor_hm1_post_XTC_8[] = {};

static u32 sensor_hm1_pre_XTC_9[] = {
	0x602A,	0x5BCC,	0x02,
};
static u32 sensor_hm1_post_XTC_9[] = {};

static u32 sensor_hm1_pre_XTC_10[] = {
	0x602A,	0x5FB4,	0x02,
};
static u32 sensor_hm1_post_XTC_10[] = {};

static u32 sensor_hm1_pre_XTC_11[] = {
	0x602A,	0x639C,	0x02,
};
static u32 sensor_hm1_post_XTC_11[] = {};

static u32 sensor_hm1_pre_XTC_12[] = {
	0x602A,	0x6784,	0x02,
};
static u32 sensor_hm1_post_XTC_12[] = {};

static u32 sensor_hm1_pre_XTC_13[] = {
	0x602A,	0x6B6C,	0x02,
};
static u32 sensor_hm1_post_XTC_13[] = {
	0x6004,	0x0000,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4730,	0x02,
	0x6F12,	0x0000,	0x02,
	0x6028,	0x4000,	0x02,
	0x602A,	0x0b00,	0x02,
	0x6F12,	0x0101,	0x02,
	0x6028,	0x4000,	0x02,
	0x602A,	0x0d80,	0x02,
	0x6F12,	0x1388,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4754,	0x02,
	0x6F12,	0x1388,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4756,	0x02,
	0x6F12,	0x1389,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4758,	0x02,
	0x6F12,	0x138a,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x475a,	0x02,
	0x6F12,	0x138b,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x475c,	0x02,
	0x6F12,	0x138c,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x475e,	0x02,
	0x6F12,	0x138d,	0x02,
	0x6028,	0x2000,	0x02,
	0x602A,	0x4760,	0x02,
	0x6F12,	0x138e,	0x02,
};

static u32 * sensor_hm1_pre_XTC[] = {
	sensor_hm1_pre_XTC_1,
	sensor_hm1_pre_XTC_2,
	sensor_hm1_pre_XTC_3,
	sensor_hm1_pre_XTC_4,
	sensor_hm1_pre_XTC_5,
	sensor_hm1_pre_XTC_6,
	sensor_hm1_pre_XTC_7,
	sensor_hm1_pre_XTC_8,
	sensor_hm1_pre_XTC_9,
	sensor_hm1_pre_XTC_10,
	sensor_hm1_pre_XTC_11,
	sensor_hm1_pre_XTC_12,
	sensor_hm1_pre_XTC_13,
};

static const u32 sensor_hm1_pre_XTC_size[] = {
	ARRAY_SIZE(sensor_hm1_pre_XTC_1),
	ARRAY_SIZE(sensor_hm1_pre_XTC_2),
	ARRAY_SIZE(sensor_hm1_pre_XTC_3),
	ARRAY_SIZE(sensor_hm1_pre_XTC_4),
	ARRAY_SIZE(sensor_hm1_pre_XTC_5),
	ARRAY_SIZE(sensor_hm1_pre_XTC_6),
	ARRAY_SIZE(sensor_hm1_pre_XTC_7),
	ARRAY_SIZE(sensor_hm1_pre_XTC_8),
	ARRAY_SIZE(sensor_hm1_pre_XTC_9),
	ARRAY_SIZE(sensor_hm1_pre_XTC_10),
	ARRAY_SIZE(sensor_hm1_pre_XTC_11),
	ARRAY_SIZE(sensor_hm1_pre_XTC_12),
	ARRAY_SIZE(sensor_hm1_pre_XTC_13),
};

static u32 * sensor_hm1_post_XTC[] = {
	sensor_hm1_post_XTC_1,
	sensor_hm1_post_XTC_2,
	sensor_hm1_post_XTC_3,
	sensor_hm1_post_XTC_4,
	sensor_hm1_post_XTC_5,
	sensor_hm1_post_XTC_6,
	sensor_hm1_post_XTC_7,
	sensor_hm1_post_XTC_8,
	sensor_hm1_post_XTC_9,
	sensor_hm1_post_XTC_10,
	sensor_hm1_post_XTC_11,
	sensor_hm1_post_XTC_12,
	sensor_hm1_post_XTC_13,
};

static const u32 sensor_hm1_post_XTC_size[] = {
	ARRAY_SIZE(sensor_hm1_post_XTC_1),
	ARRAY_SIZE(sensor_hm1_post_XTC_2),
	ARRAY_SIZE(sensor_hm1_post_XTC_3),
	ARRAY_SIZE(sensor_hm1_post_XTC_4),
	ARRAY_SIZE(sensor_hm1_post_XTC_5),
	ARRAY_SIZE(sensor_hm1_post_XTC_6),
	ARRAY_SIZE(sensor_hm1_post_XTC_7),
	ARRAY_SIZE(sensor_hm1_post_XTC_8),
	ARRAY_SIZE(sensor_hm1_post_XTC_9),
	ARRAY_SIZE(sensor_hm1_post_XTC_10),
	ARRAY_SIZE(sensor_hm1_post_XTC_11),
	ARRAY_SIZE(sensor_hm1_post_XTC_12),
	ARRAY_SIZE(sensor_hm1_post_XTC_13),
};

int sensor_hm1_cis_stream_on(struct v4l2_subdev *subdev);
int sensor_hm1_cis_stream_off(struct v4l2_subdev *subdev);
#endif
